// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
<<<<<<< HEAD
//! DATE: 2022-09-17, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `epyc-runners-node.hetzner`, CPU: `AMD EPYC 7502P 32-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs
=======
//! DATE: 2022-09-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear-node benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs
>>>>>>> 4ff7e31a (Vara: Update stage 1 to latest master (#1464))

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
<<<<<<< HEAD
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
=======
	fn allocation_cost() -> Weight;
	fn grow_cost() -> Weight;
	fn initial_cost() -> Weight;
	fn load_cost() -> Weight;
>>>>>>> 4ff7e31a (Vara: Update stage 1 to latest master (#1464))
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn gas(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
<<<<<<< HEAD
    fn gr_message_id(r: u32, ) -> Weight;
=======
    fn gr_msg_id(r: u32, ) -> Weight;
>>>>>>> 4ff7e31a (Vara: Update stage 1 to latest master (#1464))
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
<<<<<<< HEAD
    fn gr_wait_up_to(r: u32, ) -> Weight;
=======
    fn gr_wait_no_more(r: u32, ) -> Weight;
>>>>>>> 4ff7e31a (Vara: Update stage 1 to latest master (#1464))
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
<<<<<<< HEAD
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(104_749_000 as u64)
            .saturating_add(T::DbWeight::get().reads(8 as u64))
            .saturating_add(T::DbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(76_934_000 as u64)
            // Standard Error: 25
            .saturating_add(Weight::from_ref_time(41_662 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(70_642_000 as u64)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(2_514 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_554_169_000 as u64)
            // Standard Error: 475
            .saturating_add(Weight::from_ref_time(16_389 as u64).saturating_mul(c as u64))
            // Standard Error: 29
            .saturating_add(Weight::from_ref_time(965 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(77_164_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(925 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(126_844_000 as u64)
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(1_077 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(14 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(182_936_000 as u64)
            // Standard Error: 2_372
            .saturating_add(Weight::from_ref_time(9_306 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(25 as u64))
            .saturating_add(T::DbWeight::get().writes(23 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(290_792_000 as u64)
            // Standard Error: 766
            .saturating_add(Weight::from_ref_time(10_513 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(26 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(32_185_000 as u64)
            // Standard Error: 29
            .saturating_add(Weight::from_ref_time(43_005 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(78_497_000 as u64)
            // Standard Error: 52_347
            .saturating_add(Weight::from_ref_time(172_831_538 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gas(r: u32, ) -> Weight {
        Weight::from_ref_time(77_705_000 as u64)
            // Standard Error: 21_167
            .saturating_add(Weight::from_ref_time(61_690_912 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(77_836_000 as u64)
            // Standard Error: 25_434
            .saturating_add(Weight::from_ref_time(59_354_801 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(93_327_000 as u64)
            // Standard Error: 63_649
            .saturating_add(Weight::from_ref_time(74_447_317 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(92_966_000 as u64)
            // Standard Error: 60_508
            .saturating_add(Weight::from_ref_time(74_680_312 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(92_786_000 as u64)
            // Standard Error: 62_009
            .saturating_add(Weight::from_ref_time(74_589_854 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(92_845_000 as u64)
            // Standard Error: 61_790
            .saturating_add(Weight::from_ref_time(74_102_981 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(92_665_000 as u64)
            // Standard Error: 60_562
            .saturating_add(Weight::from_ref_time(80_640_972 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(93_047_000 as u64)
            // Standard Error: 61_975
            .saturating_add(Weight::from_ref_time(80_715_113 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(77_595_000 as u64)
            // Standard Error: 18_252
            .saturating_add(Weight::from_ref_time(51_066_635 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(93_086_000 as u64)
            // Standard Error: 23_879
            .saturating_add(Weight::from_ref_time(76_323_714 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(174_920_000 as u64)
            // Standard Error: 15_383
            .saturating_add(Weight::from_ref_time(7_261_361 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(77_786_000 as u64)
            // Standard Error: 17_337
            .saturating_add(Weight::from_ref_time(50_592_257 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(77_585_000 as u64)
            // Standard Error: 20_285
            .saturating_add(Weight::from_ref_time(59_218_576 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(78_337_000 as u64)
            // Standard Error: 73_076
            .saturating_add(Weight::from_ref_time(90_601_450 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(80_491_000 as u64)
            // Standard Error: 84_954
            .saturating_add(Weight::from_ref_time(175_889_470 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(290_952_000 as u64)
            // Standard Error: 26_478
            .saturating_add(Weight::from_ref_time(50_488_285 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(93_407_000 as u64)
            // Standard Error: 70_366
            .saturating_add(Weight::from_ref_time(51_780_107 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(129_279_000 as u64)
            // Standard Error: 1_831
            .saturating_add(Weight::from_ref_time(1_031_489 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(93_246_000 as u64)
            // Standard Error: 75_902
            .saturating_add(Weight::from_ref_time(92_583_393 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(219_309_000 as u64)
            // Standard Error: 2_122
            .saturating_add(Weight::from_ref_time(102_412 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(93_186_000 as u64)
            // Standard Error: 26_853
            .saturating_add(Weight::from_ref_time(79_670_698 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(177_816_000 as u64)
            // Standard Error: 26_243
            .saturating_add(Weight::from_ref_time(51_234_883 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(77_996_000 as u64)
            // Standard Error: 73_532
            .saturating_add(Weight::from_ref_time(77_578_594 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(77_575_000 as u64)
            // Standard Error: 20_995
            .saturating_add(Weight::from_ref_time(72_699_362 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(77_605_000 as u64)
            // Standard Error: 20_831
            .saturating_add(Weight::from_ref_time(50_947_704 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(93_026_000 as u64)
            // Standard Error: 186_559
            .saturating_add(Weight::from_ref_time(29_027_300 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(76_754_000 as u64)
            // Standard Error: 172_346
            .saturating_add(Weight::from_ref_time(15_431_400 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(76_763_000 as u64)
            // Standard Error: 188_048
            .saturating_add(Weight::from_ref_time(15_563_700 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(77_335_000 as u64)
            // Standard Error: 178_794
            .saturating_add(Weight::from_ref_time(38_466_500 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(77_345_000 as u64)
            // Standard Error: 188_756
            .saturating_add(Weight::from_ref_time(38_571_100 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(77_485_000 as u64)
            // Standard Error: 132_167
            .saturating_add(Weight::from_ref_time(121_667_754 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(94_719_000 as u64)
            // Standard Error: 205_376
            .saturating_add(Weight::from_ref_time(49_393_400 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(151_443_000 as u64)
            // Standard Error: 2_297
            .saturating_add(Weight::from_ref_time(1_026_025 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_186_000 as u64)
            // Standard Error: 167
            .saturating_add(Weight::from_ref_time(5_536 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(5_381_000 as u64)
            // Standard Error: 15_551
            .saturating_add(Weight::from_ref_time(758_973 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(5_371_000 as u64)
            // Standard Error: 25_160
            .saturating_add(Weight::from_ref_time(1_301_985 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_277_000 as u64)
            // Standard Error: 198
            .saturating_add(Weight::from_ref_time(609_617 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_107_000 as u64)
            // Standard Error: 309
            .saturating_add(Weight::from_ref_time(623_067 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_117_000 as u64)
            // Standard Error: 270
            .saturating_add(Weight::from_ref_time(486_210 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_176_000 as u64)
            // Standard Error: 250
            .saturating_add(Weight::from_ref_time(528_242 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 674
            .saturating_add(Weight::from_ref_time(1_589_845 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(4_419_000 as u64)
            // Standard Error: 38
            .saturating_add(Weight::from_ref_time(8_347 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_277_000 as u64)
            // Standard Error: 560
            .saturating_add(Weight::from_ref_time(652_522 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_607_000 as u64)
            // Standard Error: 700
            .saturating_add(Weight::from_ref_time(1_498_996 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_421_000 as u64)
            // Standard Error: 178
            .saturating_add(Weight::from_ref_time(74_554 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 228
            .saturating_add(Weight::from_ref_time(33_092 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_257_000 as u64)
            // Standard Error: 318
            .saturating_add(Weight::from_ref_time(61_533 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_277_000 as u64)
            // Standard Error: 346
            .saturating_add(Weight::from_ref_time(59_638 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(14_750_000 as u64)
            // Standard Error: 373
            .saturating_add(Weight::from_ref_time(51_900 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(10_741_000 as u64)
            // Standard Error: 2_524
            .saturating_add(Weight::from_ref_time(188_839 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(5_311_000 as u64)
            // Standard Error: 490
            .saturating_add(Weight::from_ref_time(1_240_959 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 326
            .saturating_add(Weight::from_ref_time(767_840 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_117_000 as u64)
            // Standard Error: 347
            .saturating_add(Weight::from_ref_time(738_772 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_116_000 as u64)
            // Standard Error: 326
            .saturating_add(Weight::from_ref_time(55_360 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_176_000 as u64)
            // Standard Error: 436
            .saturating_add(Weight::from_ref_time(109_487 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_126_000 as u64)
            // Standard Error: 258
            .saturating_add(Weight::from_ref_time(39_696 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 204
            .saturating_add(Weight::from_ref_time(27_427 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 183
            .saturating_add(Weight::from_ref_time(27_288 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 469
            .saturating_add(Weight::from_ref_time(113_417 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 450
            .saturating_add(Weight::from_ref_time(111_798 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 512
            .saturating_add(Weight::from_ref_time(112_679 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_187_000 as u64)
            // Standard Error: 438
            .saturating_add(Weight::from_ref_time(107_124 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 498
            .saturating_add(Weight::from_ref_time(112_857 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_086_000 as u64)
            // Standard Error: 465
            .saturating_add(Weight::from_ref_time(110_476 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 463
            .saturating_add(Weight::from_ref_time(108_530 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 437
            .saturating_add(Weight::from_ref_time(112_664 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_217_000 as u64)
            // Standard Error: 392
            .saturating_add(Weight::from_ref_time(107_982 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 432
            .saturating_add(Weight::from_ref_time(113_706 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_146_000 as u64)
            // Standard Error: 380
            .saturating_add(Weight::from_ref_time(91_278 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_126_000 as u64)
            // Standard Error: 388
            .saturating_add(Weight::from_ref_time(94_103 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_096_000 as u64)
            // Standard Error: 417
            .saturating_add(Weight::from_ref_time(126_616 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 426
            .saturating_add(Weight::from_ref_time(460_409 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 473
            .saturating_add(Weight::from_ref_time(460_553 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 615
            .saturating_add(Weight::from_ref_time(835_187 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_086_000 as u64)
            // Standard Error: 467
            .saturating_add(Weight::from_ref_time(456_568 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 437
            .saturating_add(Weight::from_ref_time(94_001 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_137_000 as u64)
            // Standard Error: 385
            .saturating_add(Weight::from_ref_time(93_304 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 437
            .saturating_add(Weight::from_ref_time(93_703 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_126_000 as u64)
            // Standard Error: 423
            .saturating_add(Weight::from_ref_time(87_983 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 342
            .saturating_add(Weight::from_ref_time(86_378 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 366
            .saturating_add(Weight::from_ref_time(85_106 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_196_000 as u64)
            // Standard Error: 389
            .saturating_add(Weight::from_ref_time(85_317 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_097_000 as u64)
            // Standard Error: 405
            .saturating_add(Weight::from_ref_time(86_333 as u64).saturating_mul(r as u64))
=======
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		T::DbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		T::DbWeight::get().reads(1 as Weight)
	}
    fn claim_value() -> Weight {
        (89_449_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(8 as Weight))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
    }
    fn upload_code(c: u32, ) -> Weight {
        (5_663_000 as Weight)
            // Standard Error: 0
            .saturating_add((49_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    fn create_program(s: u32, ) -> Weight {
        (3_591_000 as Weight)
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(8 as Weight))
    }
    fn upload_program(c: u32, s: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((51_000 as Weight).saturating_mul(c as Weight))
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(11 as Weight))
    }
    fn send_message(p: u32, ) -> Weight {
        (71_494_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(8 as Weight))
    }
    fn send_reply(p: u32, ) -> Weight {
        (114_168_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(14 as Weight))
            .saturating_add(T::DbWeight::get().writes(11 as Weight))
    }
    fn initial_allocation(_q: u32, ) -> Weight {
        (184_341_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(25 as Weight))
            .saturating_add(T::DbWeight::get().writes(23 as Weight))
    }
    fn alloc_in_handle(_q: u32, ) -> Weight {
        (285_254_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(26 as Weight))
            .saturating_add(T::DbWeight::get().writes(24 as Weight))
    }
    fn reinstrument(c: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((52_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn alloc(r: u32, ) -> Weight {
        (93_015_000 as Weight)
            // Standard Error: 255_000
            .saturating_add((170_082_000 as Weight).saturating_mul(r as Weight))
    }
    fn gas(r: u32, ) -> Weight {
        (77_126_000 as Weight)
            // Standard Error: 86_000
            .saturating_add((61_908_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_gas_available(r: u32, ) -> Weight {
        (80_421_000 as Weight)
            // Standard Error: 75_000
            .saturating_add((59_293_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_msg_id(r: u32, ) -> Weight {
        (114_658_000 as Weight)
            // Standard Error: 97_000
            .saturating_add((72_554_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_origin(r: u32, ) -> Weight {
        (117_082_000 as Weight)
            // Standard Error: 147_000
            .saturating_add((72_610_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_program_id(r: u32, ) -> Weight {
        (114_840_000 as Weight)
            // Standard Error: 96_000
            .saturating_add((72_061_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_source(r: u32, ) -> Weight {
        (115_115_000 as Weight)
            // Standard Error: 91_000
            .saturating_add((72_602_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_value(r: u32, ) -> Weight {
        (116_249_000 as Weight)
            // Standard Error: 111_000
            .saturating_add((77_946_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_value_available(r: u32, ) -> Weight {
        (113_580_000 as Weight)
            // Standard Error: 117_000
            .saturating_add((78_174_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_size(r: u32, ) -> Weight {
        (81_023_000 as Weight)
            // Standard Error: 39_000
            .saturating_add((51_138_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read(r: u32, ) -> Weight {
        (92_888_000 as Weight)
            // Standard Error: 131_000
            .saturating_add((77_798_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read_per_kb(n: u32, ) -> Weight {
        (191_950_000 as Weight)
            // Standard Error: 19_000
            .saturating_add((6_812_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn gr_block_height(r: u32, ) -> Weight {
        (80_620_000 as Weight)
            // Standard Error: 65_000
            .saturating_add((51_639_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_block_timestamp(r: u32, ) -> Weight {
        (83_423_000 as Weight)
            // Standard Error: 78_000
            .saturating_add((58_954_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_init(r: u32, ) -> Weight {
        (109_159_000 as Weight)
            // Standard Error: 223_000
            .saturating_add((88_497_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push(r: u32, ) -> Weight {
        (108_716_000 as Weight)
            // Standard Error: 188_000
            .saturating_add((173_005_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        (267_081_000 as Weight)
            // Standard Error: 50_000
            .saturating_add((51_149_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn gr_send_commit(r: u32, ) -> Weight {
        (115_537_000 as Weight)
            // Standard Error: 128_000
            .saturating_add((51_082_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        (122_056_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((1_197_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn gr_reply_commit(r: u32, ) -> Weight {
        (120_451_000 as Weight)
            // Standard Error: 113_000
            .saturating_add((98_658_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        (224_718_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((58_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
    }
    fn gr_reply_push(r: u32, ) -> Weight {
        (99_601_000 as Weight)
            // Standard Error: 111_000
            .saturating_add((79_217_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        (168_451_000 as Weight)
            // Standard Error: 57_000
            .saturating_add((51_718_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_reply_to(r: u32, ) -> Weight {
        (109_265_000 as Weight)
            // Standard Error: 123_000
            .saturating_add((74_158_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_debug(r: u32, ) -> Weight {
        (83_754_000 as Weight)
            // Standard Error: 85_000
            .saturating_add((72_511_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit_code(r: u32, ) -> Weight {
        (81_871_000 as Weight)
            // Standard Error: 77_000
            .saturating_add((51_130_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit(r: u32, ) -> Weight {
        (89_470_000 as Weight)
            // Standard Error: 348_000
            .saturating_add((25_757_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_leave(r: u32, ) -> Weight {
        (76_763_000 as Weight)
            // Standard Error: 128_000
            .saturating_add((13_948_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait(r: u32, ) -> Weight {
        (77_716_000 as Weight)
            // Standard Error: 543_000
            .saturating_add((13_447_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait_for(r: u32, ) -> Weight {
        (77_717_000 as Weight)
            // Standard Error: 110_000
            .saturating_add((32_742_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wait_no_more(r: u32, ) -> Weight {
        (78_857_000 as Weight)
            // Standard Error: 198_000
            .saturating_add((31_399_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wake(r: u32, ) -> Weight {
        (111_568_000 as Weight)
            // Standard Error: 190_000
            .saturating_add((115_000_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        (91_598_000 as Weight)
            // Standard Error: 998_000
            .saturating_add((47_810_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        (145_026_000 as Weight)
            // Standard Error: 10_000
            .saturating_add((1_159_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        (2_969_000 as Weight)
            // Standard Error: 0
            .saturating_add((2_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64load(r: u32, ) -> Weight {
        (23_180_000 as Weight)
            // Standard Error: 7_000
            .saturating_add((181_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64store(r: u32, ) -> Weight {
        (34_582_000 as Weight)
            // Standard Error: 12_000
            .saturating_add((390_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_select(r: u32, ) -> Weight {
        (3_098_000 as Weight)
            // Standard Error: 0
            .saturating_add((609_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_if(r: u32, ) -> Weight {
        (3_057_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((622_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br(r: u32, ) -> Weight {
        (3_194_000 as Weight)
            // Standard Error: 0
            .saturating_add((479_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_if(r: u32, ) -> Weight {
        (3_197_000 as Weight)
            // Standard Error: 0
            .saturating_add((522_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table(r: u32, ) -> Weight {
        (3_680_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_571_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        (4_346_000 as Weight)
            // Standard Error: 0
            .saturating_add((7_000 as Weight).saturating_mul(e as Weight))
    }
    fn instr_call(r: u32, ) -> Weight {
        (3_522_000 as Weight)
            // Standard Error: 0
            .saturating_add((641_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect(r: u32, ) -> Weight {
        (4_045_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_476_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        (4_803_000 as Weight)
            // Standard Error: 0
            .saturating_add((78_000 as Weight).saturating_mul(p as Weight))
    }
    fn instr_local_get(r: u32, ) -> Weight {
        (3_091_000 as Weight)
            // Standard Error: 0
            .saturating_add((26_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_set(r: u32, ) -> Weight {
        (3_162_000 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_tee(r: u32, ) -> Weight {
        (3_199_000 as Weight)
            // Standard Error: 0
            .saturating_add((51_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_get(r: u32, ) -> Weight {
        (13_988_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((61_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_set(r: u32, ) -> Weight {
        (14_015_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((74_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_memory_current(r: u32, ) -> Weight {
        (8_099_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((1_334_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64clz(r: u32, ) -> Weight {
        (3_140_000 as Weight)
            // Standard Error: 0
            .saturating_add((763_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ctz(r: u32, ) -> Weight {
        (3_146_000 as Weight)
            // Standard Error: 0
            .saturating_add((733_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64popcnt(r: u32, ) -> Weight {
        (3_002_000 as Weight)
            // Standard Error: 0
            .saturating_add((46_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eqz(r: u32, ) -> Weight {
        (2_995_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        (3_053_000 as Weight)
            // Standard Error: 0
            .saturating_add((29_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendui32(r: u32, ) -> Weight {
        (3_040_000 as Weight)
            // Standard Error: 0
            .saturating_add((17_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        (3_085_000 as Weight)
            // Standard Error: 0
            .saturating_add((17_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eq(r: u32, ) -> Weight {
        (3_004_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ne(r: u32, ) -> Weight {
        (3_016_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64lts(r: u32, ) -> Weight {
        (2_956_000 as Weight)
            // Standard Error: 0
            .saturating_add((106_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ltu(r: u32, ) -> Weight {
        (3_000_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gts(r: u32, ) -> Weight {
        (3_019_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gtu(r: u32, ) -> Weight {
        (2_987_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64les(r: u32, ) -> Weight {
        (2_992_000 as Weight)
            // Standard Error: 0
            .saturating_add((99_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64leu(r: u32, ) -> Weight {
        (2_969_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ges(r: u32, ) -> Weight {
        (2_970_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64geu(r: u32, ) -> Weight {
        (2_953_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64add(r: u32, ) -> Weight {
        (3_081_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64sub(r: u32, ) -> Weight {
        (3_072_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64mul(r: u32, ) -> Weight {
        (3_022_000 as Weight)
            // Standard Error: 0
            .saturating_add((111_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divs(r: u32, ) -> Weight {
        (3_203_000 as Weight)
            // Standard Error: 0
            .saturating_add((450_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divu(r: u32, ) -> Weight {
        (3_252_000 as Weight)
            // Standard Error: 0
            .saturating_add((443_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rems(r: u32, ) -> Weight {
        (3_450_000 as Weight)
            // Standard Error: 0
            .saturating_add((816_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64remu(r: u32, ) -> Weight {
        (3_152_000 as Weight)
            // Standard Error: 0
            .saturating_add((449_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64and(r: u32, ) -> Weight {
        (3_054_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64or(r: u32, ) -> Weight {
        (3_041_000 as Weight)
            // Standard Error: 0
            .saturating_add((85_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64xor(r: u32, ) -> Weight {
        (3_060_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shl(r: u32, ) -> Weight {
        (3_012_000 as Weight)
            // Standard Error: 0
            .saturating_add((77_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shrs(r: u32, ) -> Weight {
        (3_074_000 as Weight)
            // Standard Error: 0
            .saturating_add((76_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shru(r: u32, ) -> Weight {
        (3_055_000 as Weight)
            // Standard Error: 0
            .saturating_add((76_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotl(r: u32, ) -> Weight {
        (3_031_000 as Weight)
            // Standard Error: 0
            .saturating_add((75_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotr(r: u32, ) -> Weight {
        (3_049_000 as Weight)
            // Standard Error: 0
            .saturating_add((75_000 as Weight).saturating_mul(r as Weight))
>>>>>>> 4ff7e31a (Vara: Update stage 1 to latest master (#1464))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
<<<<<<< HEAD
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(104_749_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(8 as u64))
            .saturating_add(RocksDbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(76_934_000 as u64)
            // Standard Error: 25
            .saturating_add(Weight::from_ref_time(41_662 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(70_642_000 as u64)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(2_514 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_554_169_000 as u64)
            // Standard Error: 475
            .saturating_add(Weight::from_ref_time(16_389 as u64).saturating_mul(c as u64))
            // Standard Error: 29
            .saturating_add(Weight::from_ref_time(965 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(77_164_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(925 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(126_844_000 as u64)
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(1_077 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(14 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(182_936_000 as u64)
            // Standard Error: 2_372
            .saturating_add(Weight::from_ref_time(9_306 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(25 as u64))
            .saturating_add(RocksDbWeight::get().writes(23 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(290_792_000 as u64)
            // Standard Error: 766
            .saturating_add(Weight::from_ref_time(10_513 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(26 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(32_185_000 as u64)
            // Standard Error: 29
            .saturating_add(Weight::from_ref_time(43_005 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(78_497_000 as u64)
            // Standard Error: 52_347
            .saturating_add(Weight::from_ref_time(172_831_538 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gas(r: u32, ) -> Weight {
        Weight::from_ref_time(77_705_000 as u64)
            // Standard Error: 21_167
            .saturating_add(Weight::from_ref_time(61_690_912 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(77_836_000 as u64)
            // Standard Error: 25_434
            .saturating_add(Weight::from_ref_time(59_354_801 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        Weight::from_ref_time(93_327_000 as u64)
            // Standard Error: 63_649
            .saturating_add(Weight::from_ref_time(74_447_317 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(92_966_000 as u64)
            // Standard Error: 60_508
            .saturating_add(Weight::from_ref_time(74_680_312 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(92_786_000 as u64)
            // Standard Error: 62_009
            .saturating_add(Weight::from_ref_time(74_589_854 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(92_845_000 as u64)
            // Standard Error: 61_790
            .saturating_add(Weight::from_ref_time(74_102_981 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(92_665_000 as u64)
            // Standard Error: 60_562
            .saturating_add(Weight::from_ref_time(80_640_972 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(93_047_000 as u64)
            // Standard Error: 61_975
            .saturating_add(Weight::from_ref_time(80_715_113 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(77_595_000 as u64)
            // Standard Error: 18_252
            .saturating_add(Weight::from_ref_time(51_066_635 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(93_086_000 as u64)
            // Standard Error: 23_879
            .saturating_add(Weight::from_ref_time(76_323_714 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(174_920_000 as u64)
            // Standard Error: 15_383
            .saturating_add(Weight::from_ref_time(7_261_361 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(77_786_000 as u64)
            // Standard Error: 17_337
            .saturating_add(Weight::from_ref_time(50_592_257 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(77_585_000 as u64)
            // Standard Error: 20_285
            .saturating_add(Weight::from_ref_time(59_218_576 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(78_337_000 as u64)
            // Standard Error: 73_076
            .saturating_add(Weight::from_ref_time(90_601_450 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(80_491_000 as u64)
            // Standard Error: 84_954
            .saturating_add(Weight::from_ref_time(175_889_470 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(290_952_000 as u64)
            // Standard Error: 26_478
            .saturating_add(Weight::from_ref_time(50_488_285 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(93_407_000 as u64)
            // Standard Error: 70_366
            .saturating_add(Weight::from_ref_time(51_780_107 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(129_279_000 as u64)
            // Standard Error: 1_831
            .saturating_add(Weight::from_ref_time(1_031_489 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(93_246_000 as u64)
            // Standard Error: 75_902
            .saturating_add(Weight::from_ref_time(92_583_393 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(219_309_000 as u64)
            // Standard Error: 2_122
            .saturating_add(Weight::from_ref_time(102_412 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(93_186_000 as u64)
            // Standard Error: 26_853
            .saturating_add(Weight::from_ref_time(79_670_698 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(177_816_000 as u64)
            // Standard Error: 26_243
            .saturating_add(Weight::from_ref_time(51_234_883 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(77_996_000 as u64)
            // Standard Error: 73_532
            .saturating_add(Weight::from_ref_time(77_578_594 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(77_575_000 as u64)
            // Standard Error: 20_995
            .saturating_add(Weight::from_ref_time(72_699_362 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(77_605_000 as u64)
            // Standard Error: 20_831
            .saturating_add(Weight::from_ref_time(50_947_704 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(93_026_000 as u64)
            // Standard Error: 186_559
            .saturating_add(Weight::from_ref_time(29_027_300 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(76_754_000 as u64)
            // Standard Error: 172_346
            .saturating_add(Weight::from_ref_time(15_431_400 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(76_763_000 as u64)
            // Standard Error: 188_048
            .saturating_add(Weight::from_ref_time(15_563_700 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(77_335_000 as u64)
            // Standard Error: 178_794
            .saturating_add(Weight::from_ref_time(38_466_500 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(77_345_000 as u64)
            // Standard Error: 188_756
            .saturating_add(Weight::from_ref_time(38_571_100 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(77_485_000 as u64)
            // Standard Error: 132_167
            .saturating_add(Weight::from_ref_time(121_667_754 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(94_719_000 as u64)
            // Standard Error: 205_376
            .saturating_add(Weight::from_ref_time(49_393_400 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((4 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(151_443_000 as u64)
            // Standard Error: 2_297
            .saturating_add(Weight::from_ref_time(1_026_025 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_186_000 as u64)
            // Standard Error: 167
            .saturating_add(Weight::from_ref_time(5_536 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(5_381_000 as u64)
            // Standard Error: 15_551
            .saturating_add(Weight::from_ref_time(758_973 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(5_371_000 as u64)
            // Standard Error: 25_160
            .saturating_add(Weight::from_ref_time(1_301_985 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_277_000 as u64)
            // Standard Error: 198
            .saturating_add(Weight::from_ref_time(609_617 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_107_000 as u64)
            // Standard Error: 309
            .saturating_add(Weight::from_ref_time(623_067 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_117_000 as u64)
            // Standard Error: 270
            .saturating_add(Weight::from_ref_time(486_210 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_176_000 as u64)
            // Standard Error: 250
            .saturating_add(Weight::from_ref_time(528_242 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 674
            .saturating_add(Weight::from_ref_time(1_589_845 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(4_419_000 as u64)
            // Standard Error: 38
            .saturating_add(Weight::from_ref_time(8_347 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_277_000 as u64)
            // Standard Error: 560
            .saturating_add(Weight::from_ref_time(652_522 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_607_000 as u64)
            // Standard Error: 700
            .saturating_add(Weight::from_ref_time(1_498_996 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_421_000 as u64)
            // Standard Error: 178
            .saturating_add(Weight::from_ref_time(74_554 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 228
            .saturating_add(Weight::from_ref_time(33_092 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_257_000 as u64)
            // Standard Error: 318
            .saturating_add(Weight::from_ref_time(61_533 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_277_000 as u64)
            // Standard Error: 346
            .saturating_add(Weight::from_ref_time(59_638 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(14_750_000 as u64)
            // Standard Error: 373
            .saturating_add(Weight::from_ref_time(51_900 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(10_741_000 as u64)
            // Standard Error: 2_524
            .saturating_add(Weight::from_ref_time(188_839 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(5_311_000 as u64)
            // Standard Error: 490
            .saturating_add(Weight::from_ref_time(1_240_959 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 326
            .saturating_add(Weight::from_ref_time(767_840 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_117_000 as u64)
            // Standard Error: 347
            .saturating_add(Weight::from_ref_time(738_772 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_116_000 as u64)
            // Standard Error: 326
            .saturating_add(Weight::from_ref_time(55_360 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_176_000 as u64)
            // Standard Error: 436
            .saturating_add(Weight::from_ref_time(109_487 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_126_000 as u64)
            // Standard Error: 258
            .saturating_add(Weight::from_ref_time(39_696 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 204
            .saturating_add(Weight::from_ref_time(27_427 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 183
            .saturating_add(Weight::from_ref_time(27_288 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 469
            .saturating_add(Weight::from_ref_time(113_417 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_136_000 as u64)
            // Standard Error: 450
            .saturating_add(Weight::from_ref_time(111_798 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 512
            .saturating_add(Weight::from_ref_time(112_679 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_187_000 as u64)
            // Standard Error: 438
            .saturating_add(Weight::from_ref_time(107_124 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 498
            .saturating_add(Weight::from_ref_time(112_857 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_086_000 as u64)
            // Standard Error: 465
            .saturating_add(Weight::from_ref_time(110_476 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 463
            .saturating_add(Weight::from_ref_time(108_530 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 437
            .saturating_add(Weight::from_ref_time(112_664 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_217_000 as u64)
            // Standard Error: 392
            .saturating_add(Weight::from_ref_time(107_982 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_056_000 as u64)
            // Standard Error: 432
            .saturating_add(Weight::from_ref_time(113_706 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_146_000 as u64)
            // Standard Error: 380
            .saturating_add(Weight::from_ref_time(91_278 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_126_000 as u64)
            // Standard Error: 388
            .saturating_add(Weight::from_ref_time(94_103 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_096_000 as u64)
            // Standard Error: 417
            .saturating_add(Weight::from_ref_time(126_616 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 426
            .saturating_add(Weight::from_ref_time(460_409 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 473
            .saturating_add(Weight::from_ref_time(460_553 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 615
            .saturating_add(Weight::from_ref_time(835_187 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_086_000 as u64)
            // Standard Error: 467
            .saturating_add(Weight::from_ref_time(456_568 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_066_000 as u64)
            // Standard Error: 437
            .saturating_add(Weight::from_ref_time(94_001 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_137_000 as u64)
            // Standard Error: 385
            .saturating_add(Weight::from_ref_time(93_304 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_076_000 as u64)
            // Standard Error: 437
            .saturating_add(Weight::from_ref_time(93_703 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_126_000 as u64)
            // Standard Error: 423
            .saturating_add(Weight::from_ref_time(87_983 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 342
            .saturating_add(Weight::from_ref_time(86_378 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 366
            .saturating_add(Weight::from_ref_time(85_106 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_196_000 as u64)
            // Standard Error: 389
            .saturating_add(Weight::from_ref_time(85_317 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_097_000 as u64)
            // Standard Error: 405
            .saturating_add(Weight::from_ref_time(86_333 as u64).saturating_mul(r as u64))
    }
}
=======
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		RocksDbWeight::get().reads(1 as Weight)
	}
    fn claim_value() -> Weight {
        (89_449_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(8 as Weight))
            .saturating_add(RocksDbWeight::get().writes(6 as Weight))
    }
    fn upload_code(c: u32, ) -> Weight {
        (5_663_000 as Weight)
            // Standard Error: 0
            .saturating_add((49_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
    }
    fn create_program(s: u32, ) -> Weight {
        (3_591_000 as Weight)
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(8 as Weight))
    }
    fn upload_program(c: u32, s: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((51_000 as Weight).saturating_mul(c as Weight))
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(11 as Weight))
    }
    fn send_message(p: u32, ) -> Weight {
        (71_494_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(8 as Weight))
    }
    fn send_reply(p: u32, ) -> Weight {
        (114_168_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(RocksDbWeight::get().reads(14 as Weight))
            .saturating_add(RocksDbWeight::get().writes(11 as Weight))
    }
    fn initial_allocation(_q: u32, ) -> Weight {
        (184_341_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(25 as Weight))
            .saturating_add(RocksDbWeight::get().writes(23 as Weight))
    }
    fn alloc_in_handle(_q: u32, ) -> Weight {
        (285_254_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(26 as Weight))
            .saturating_add(RocksDbWeight::get().writes(24 as Weight))
    }
    fn reinstrument(c: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((52_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
    }
    fn alloc(r: u32, ) -> Weight {
        (93_015_000 as Weight)
            // Standard Error: 255_000
            .saturating_add((170_082_000 as Weight).saturating_mul(r as Weight))
    }
    fn gas(r: u32, ) -> Weight {
        (77_126_000 as Weight)
            // Standard Error: 86_000
            .saturating_add((61_908_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_gas_available(r: u32, ) -> Weight {
        (80_421_000 as Weight)
            // Standard Error: 75_000
            .saturating_add((59_293_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_msg_id(r: u32, ) -> Weight {
        (114_658_000 as Weight)
            // Standard Error: 97_000
            .saturating_add((72_554_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_origin(r: u32, ) -> Weight {
        (117_082_000 as Weight)
            // Standard Error: 147_000
            .saturating_add((72_610_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_program_id(r: u32, ) -> Weight {
        (114_840_000 as Weight)
            // Standard Error: 96_000
            .saturating_add((72_061_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_source(r: u32, ) -> Weight {
        (115_115_000 as Weight)
            // Standard Error: 91_000
            .saturating_add((72_602_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_value(r: u32, ) -> Weight {
        (116_249_000 as Weight)
            // Standard Error: 111_000
            .saturating_add((77_946_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_value_available(r: u32, ) -> Weight {
        (113_580_000 as Weight)
            // Standard Error: 117_000
            .saturating_add((78_174_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_size(r: u32, ) -> Weight {
        (81_023_000 as Weight)
            // Standard Error: 39_000
            .saturating_add((51_138_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read(r: u32, ) -> Weight {
        (92_888_000 as Weight)
            // Standard Error: 131_000
            .saturating_add((77_798_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read_per_kb(n: u32, ) -> Weight {
        (191_950_000 as Weight)
            // Standard Error: 19_000
            .saturating_add((6_812_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn gr_block_height(r: u32, ) -> Weight {
        (80_620_000 as Weight)
            // Standard Error: 65_000
            .saturating_add((51_639_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_block_timestamp(r: u32, ) -> Weight {
        (83_423_000 as Weight)
            // Standard Error: 78_000
            .saturating_add((58_954_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_init(r: u32, ) -> Weight {
        (109_159_000 as Weight)
            // Standard Error: 223_000
            .saturating_add((88_497_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push(r: u32, ) -> Weight {
        (108_716_000 as Weight)
            // Standard Error: 188_000
            .saturating_add((173_005_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        (267_081_000 as Weight)
            // Standard Error: 50_000
            .saturating_add((51_149_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn gr_send_commit(r: u32, ) -> Weight {
        (115_537_000 as Weight)
            // Standard Error: 128_000
            .saturating_add((51_082_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        (122_056_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((1_197_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn gr_reply_commit(r: u32, ) -> Weight {
        (120_451_000 as Weight)
            // Standard Error: 113_000
            .saturating_add((98_658_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        (224_718_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((58_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(4 as Weight))
    }
    fn gr_reply_push(r: u32, ) -> Weight {
        (99_601_000 as Weight)
            // Standard Error: 111_000
            .saturating_add((79_217_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        (168_451_000 as Weight)
            // Standard Error: 57_000
            .saturating_add((51_718_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_reply_to(r: u32, ) -> Weight {
        (109_265_000 as Weight)
            // Standard Error: 123_000
            .saturating_add((74_158_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_debug(r: u32, ) -> Weight {
        (83_754_000 as Weight)
            // Standard Error: 85_000
            .saturating_add((72_511_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit_code(r: u32, ) -> Weight {
        (81_871_000 as Weight)
            // Standard Error: 77_000
            .saturating_add((51_130_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit(r: u32, ) -> Weight {
        (89_470_000 as Weight)
            // Standard Error: 348_000
            .saturating_add((25_757_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_leave(r: u32, ) -> Weight {
        (76_763_000 as Weight)
            // Standard Error: 128_000
            .saturating_add((13_948_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait(r: u32, ) -> Weight {
        (77_716_000 as Weight)
            // Standard Error: 543_000
            .saturating_add((13_447_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait_for(r: u32, ) -> Weight {
        (77_717_000 as Weight)
            // Standard Error: 110_000
            .saturating_add((32_742_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wait_no_more(r: u32, ) -> Weight {
        (78_857_000 as Weight)
            // Standard Error: 198_000
            .saturating_add((31_399_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wake(r: u32, ) -> Weight {
        (111_568_000 as Weight)
            // Standard Error: 190_000
            .saturating_add((115_000_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        (91_598_000 as Weight)
            // Standard Error: 998_000
            .saturating_add((47_810_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        (145_026_000 as Weight)
            // Standard Error: 10_000
            .saturating_add((1_159_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        (2_969_000 as Weight)
            // Standard Error: 0
            .saturating_add((2_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64load(r: u32, ) -> Weight {
        (23_180_000 as Weight)
            // Standard Error: 7_000
            .saturating_add((181_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64store(r: u32, ) -> Weight {
        (34_582_000 as Weight)
            // Standard Error: 12_000
            .saturating_add((390_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_select(r: u32, ) -> Weight {
        (3_098_000 as Weight)
            // Standard Error: 0
            .saturating_add((609_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_if(r: u32, ) -> Weight {
        (3_057_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((622_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br(r: u32, ) -> Weight {
        (3_194_000 as Weight)
            // Standard Error: 0
            .saturating_add((479_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_if(r: u32, ) -> Weight {
        (3_197_000 as Weight)
            // Standard Error: 0
            .saturating_add((522_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table(r: u32, ) -> Weight {
        (3_680_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_571_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        (4_346_000 as Weight)
            // Standard Error: 0
            .saturating_add((7_000 as Weight).saturating_mul(e as Weight))
    }
    fn instr_call(r: u32, ) -> Weight {
        (3_522_000 as Weight)
            // Standard Error: 0
            .saturating_add((641_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect(r: u32, ) -> Weight {
        (4_045_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_476_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        (4_803_000 as Weight)
            // Standard Error: 0
            .saturating_add((78_000 as Weight).saturating_mul(p as Weight))
    }
    fn instr_local_get(r: u32, ) -> Weight {
        (3_091_000 as Weight)
            // Standard Error: 0
            .saturating_add((26_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_set(r: u32, ) -> Weight {
        (3_162_000 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_tee(r: u32, ) -> Weight {
        (3_199_000 as Weight)
            // Standard Error: 0
            .saturating_add((51_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_get(r: u32, ) -> Weight {
        (13_988_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((61_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_set(r: u32, ) -> Weight {
        (14_015_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((74_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_memory_current(r: u32, ) -> Weight {
        (8_099_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((1_334_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64clz(r: u32, ) -> Weight {
        (3_140_000 as Weight)
            // Standard Error: 0
            .saturating_add((763_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ctz(r: u32, ) -> Weight {
        (3_146_000 as Weight)
            // Standard Error: 0
            .saturating_add((733_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64popcnt(r: u32, ) -> Weight {
        (3_002_000 as Weight)
            // Standard Error: 0
            .saturating_add((46_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eqz(r: u32, ) -> Weight {
        (2_995_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        (3_053_000 as Weight)
            // Standard Error: 0
            .saturating_add((29_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendui32(r: u32, ) -> Weight {
        (3_040_000 as Weight)
            // Standard Error: 0
            .saturating_add((17_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        (3_085_000 as Weight)
            // Standard Error: 0
            .saturating_add((17_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eq(r: u32, ) -> Weight {
        (3_004_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ne(r: u32, ) -> Weight {
        (3_016_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64lts(r: u32, ) -> Weight {
        (2_956_000 as Weight)
            // Standard Error: 0
            .saturating_add((106_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ltu(r: u32, ) -> Weight {
        (3_000_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gts(r: u32, ) -> Weight {
        (3_019_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gtu(r: u32, ) -> Weight {
        (2_987_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64les(r: u32, ) -> Weight {
        (2_992_000 as Weight)
            // Standard Error: 0
            .saturating_add((99_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64leu(r: u32, ) -> Weight {
        (2_969_000 as Weight)
            // Standard Error: 0
            .saturating_add((101_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ges(r: u32, ) -> Weight {
        (2_970_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64geu(r: u32, ) -> Weight {
        (2_953_000 as Weight)
            // Standard Error: 0
            .saturating_add((103_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64add(r: u32, ) -> Weight {
        (3_081_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64sub(r: u32, ) -> Weight {
        (3_072_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64mul(r: u32, ) -> Weight {
        (3_022_000 as Weight)
            // Standard Error: 0
            .saturating_add((111_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divs(r: u32, ) -> Weight {
        (3_203_000 as Weight)
            // Standard Error: 0
            .saturating_add((450_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divu(r: u32, ) -> Weight {
        (3_252_000 as Weight)
            // Standard Error: 0
            .saturating_add((443_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rems(r: u32, ) -> Weight {
        (3_450_000 as Weight)
            // Standard Error: 0
            .saturating_add((816_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64remu(r: u32, ) -> Weight {
        (3_152_000 as Weight)
            // Standard Error: 0
            .saturating_add((449_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64and(r: u32, ) -> Weight {
        (3_054_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64or(r: u32, ) -> Weight {
        (3_041_000 as Weight)
            // Standard Error: 0
            .saturating_add((85_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64xor(r: u32, ) -> Weight {
        (3_060_000 as Weight)
            // Standard Error: 0
            .saturating_add((82_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shl(r: u32, ) -> Weight {
        (3_012_000 as Weight)
            // Standard Error: 0
            .saturating_add((77_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shrs(r: u32, ) -> Weight {
        (3_074_000 as Weight)
            // Standard Error: 0
            .saturating_add((76_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shru(r: u32, ) -> Weight {
        (3_055_000 as Weight)
            // Standard Error: 0
            .saturating_add((76_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotl(r: u32, ) -> Weight {
        (3_031_000 as Weight)
            // Standard Error: 0
            .saturating_add((75_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotr(r: u32, ) -> Weight {
        (3_049_000 as Weight)
            // Standard Error: 0
            .saturating_add((75_000 as Weight).saturating_mul(r as Weight))
    }
}
>>>>>>> 4ff7e31a (Vara: Update stage 1 to latest master (#1464))
