// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-15, STEPS: `10`, REPEAT: `3`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear benchmark pallet --chain=gear-dev --steps=10 --repeat=3 --pallet=pallet-gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=a --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_message_with_voucher(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn send_reply_with_voucher(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_040_000 picoseconds.
        Weight::from_parts(2_040_000, 0)
            // Standard Error: 18_979
            .saturating_add(Weight::from_parts(334_739, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3504 + c * (1024 ±0)`
        // Minimum execution time: 4_357_000 picoseconds.
        Weight::from_parts(4_357_000, 3504)
            // Standard Error: 5_047
            .saturating_add(Weight::from_parts(686_014, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_996_000 picoseconds.
        Weight::from_parts(108_899_275, 0)
            // Standard Error: 71_361
            .saturating_add(Weight::from_parts(2_496_736, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 131_854_000 picoseconds.
        Weight::from_parts(132_338_000, 42236)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 82_431_000 picoseconds.
        Weight::from_parts(83_345_000, 21261)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 43_182_000 picoseconds.
        Weight::from_parts(44_504_000, 17070)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7639`
        // Minimum execution time: 12_865_000 picoseconds.
        Weight::from_parts(9_458_636, 7639)
            // Standard Error: 178_801
            .saturating_add(Weight::from_parts(17_362_166, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1359 + c * (16389 ±0)`
        //  Estimated: `41342 + c * (131112 ±0)`
        // Minimum execution time: 104_945_000 picoseconds.
        Weight::from_parts(104_945_000, 41342)
            // Standard Error: 735_082
            .saturating_add(Weight::from_parts(54_746_784, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 97_584_000 picoseconds.
        Weight::from_parts(79_621_753, 4990)
            // Standard Error: 1_263_173
            .saturating_add(Weight::from_parts(67_550_804, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `738`
        //  Estimated: `39375`
        // Minimum execution time: 107_398_000 picoseconds.
        Weight::from_parts(128_550_515, 39375)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(2_580, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 11_014_116_000 picoseconds.
        Weight::from_parts(119_918_796, 34312)
            // Standard Error: 1_663_676
            .saturating_add(Weight::from_parts(68_050_564, 0).saturating_mul(c.into()))
            // Standard Error: 99
            .saturating_add(Weight::from_parts(2_559, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 93_486_000 picoseconds.
        Weight::from_parts(78_861_752, 23853)
            // Standard Error: 38
            .saturating_add(Weight::from_parts(1_241, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 98_145_000 picoseconds.
        Weight::from_parts(83_098_084, 27177)
            // Standard Error: 36
            .saturating_add(Weight::from_parts(1_237, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 132_366_000 picoseconds.
        Weight::from_parts(107_560_867, 42227)
            // Standard Error: 42
            .saturating_add(Weight::from_parts(1_281, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 150_229_000 picoseconds.
        Weight::from_parts(133_309_524, 45757)
            // Standard Error: 41
            .saturating_add(Weight::from_parts(1_281, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74787`
        // Minimum execution time: 477_638_000 picoseconds.
        Weight::from_parts(516_823_011, 74787)
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74211`
        // Minimum execution time: 501_571_000 picoseconds.
        Weight::from_parts(539_615_324, 74211)
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `221 + c * (1075 ±0)`
        //  Estimated: `3951 + c * (2150 ±0)`
        // Minimum execution time: 71_212_000 picoseconds.
        Weight::from_parts(71_212_000, 3951)
            // Standard Error: 389_589
            .saturating_add(Weight::from_parts(65_630_946, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 135_371_000 picoseconds.
        Weight::from_parts(135_371_000, 0)
            // Standard Error: 14_948_038
            .saturating_add(Weight::from_parts(803_936_293, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 657_847_000 picoseconds.
        Weight::from_parts(613_849_012, 0)
            // Standard Error: 51_209
            .saturating_add(Weight::from_parts(27_902_292, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 416_038_000 picoseconds.
        Weight::from_parts(464_063_936, 0)
            // Standard Error: 1_449_692
            .saturating_add(Weight::from_parts(282_581_940, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_156_000 picoseconds.
        Weight::from_parts(147_882_974, 0)
            // Standard Error: 44_524
            .saturating_add(Weight::from_parts(6_555_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 201_069_000 picoseconds.
        Weight::from_parts(246_783_182, 0)
            // Standard Error: 63_375
            .saturating_add(Weight::from_parts(7_257_624, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 135_271_000 picoseconds.
        Weight::from_parts(197_973_307, 0)
            // Standard Error: 2_211_133
            .saturating_add(Weight::from_parts(407_032_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 136_098_000 picoseconds.
        Weight::from_parts(139_358_766, 0)
            // Standard Error: 987_309
            .saturating_add(Weight::from_parts(405_184_746, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_901_000 picoseconds.
        Weight::from_parts(165_337_673, 0)
            // Standard Error: 1_052_296
            .saturating_add(Weight::from_parts(404_303_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_101_000 picoseconds.
        Weight::from_parts(156_597_967, 0)
            // Standard Error: 1_379_125
            .saturating_add(Weight::from_parts(400_240_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_975_000 picoseconds.
        Weight::from_parts(143_901_198, 0)
            // Standard Error: 1_309_142
            .saturating_add(Weight::from_parts(394_058_514, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_153_000 picoseconds.
        Weight::from_parts(138_063_815, 0)
            // Standard Error: 1_073_912
            .saturating_add(Weight::from_parts(399_894_755, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_236_000 picoseconds.
        Weight::from_parts(163_945_474, 0)
            // Standard Error: 1_074_912
            .saturating_add(Weight::from_parts(396_392_422, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_870_000 picoseconds.
        Weight::from_parts(141_867_718, 0)
            // Standard Error: 1_267_652
            .saturating_add(Weight::from_parts(398_787_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 789_856_000 picoseconds.
        Weight::from_parts(1_200_539_421, 0)
            // Standard Error: 15_420_720
            .saturating_add(Weight::from_parts(540_755_105, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_243_958_000 picoseconds.
        Weight::from_parts(1_243_958_000, 0)
            // Standard Error: 258_385
            .saturating_add(Weight::from_parts(14_060_304, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_559_000 picoseconds.
        Weight::from_parts(148_433_924, 0)
            // Standard Error: 1_054_983
            .saturating_add(Weight::from_parts(400_274_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 137_838_000 picoseconds.
        Weight::from_parts(146_592_236, 0)
            // Standard Error: 1_191_929
            .saturating_add(Weight::from_parts(393_602_246, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_735_000 picoseconds.
        Weight::from_parts(167_854_405, 0)
            // Standard Error: 1_719_090
            .saturating_add(Weight::from_parts(491_520_041, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 135_271_000 picoseconds.
        Weight::from_parts(135_271_000, 0)
            // Standard Error: 21_084_025
            .saturating_add(Weight::from_parts(1_754_773_596, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 136_135_000 picoseconds.
        Weight::from_parts(226_241_059, 0)
            // Standard Error: 3_740_718
            .saturating_add(Weight::from_parts(701_643_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 824_985_000 picoseconds.
        Weight::from_parts(824_985_000, 0)
            // Standard Error: 2_034_835
            .saturating_add(Weight::from_parts(28_759_420, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_440_000 picoseconds.
        Weight::from_parts(249_501_401, 0)
            // Standard Error: 4_152_149
            .saturating_add(Weight::from_parts(702_272_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 821_633_000 picoseconds.
        Weight::from_parts(821_633_000, 0)
            // Standard Error: 2_046_694
            .saturating_add(Weight::from_parts(29_562_199, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 765_983_000 picoseconds.
        Weight::from_parts(1_205_656_738, 0)
            // Standard Error: 18_904_741
            .saturating_add(Weight::from_parts(720_998_808, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 776_055_000 picoseconds.
        Weight::from_parts(1_207_173_026, 0)
            // Standard Error: 19_488_793
            .saturating_add(Weight::from_parts(727_336_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_521_000 picoseconds.
        Weight::from_parts(135_984_354, 0)
            // Standard Error: 1_406_845
            .saturating_add(Weight::from_parts(410_737_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_218_535_000 picoseconds.
        Weight::from_parts(8_307_074_386, 0)
            // Standard Error: 2_841_243
            .saturating_add(Weight::from_parts(585_692_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 980_470_000 picoseconds.
        Weight::from_parts(980_470_000, 0)
            // Standard Error: 2_074_734
            .saturating_add(Weight::from_parts(39_688_678, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_220_727_000 picoseconds.
        Weight::from_parts(8_298_752_854, 0)
            // Standard Error: 3_966_870
            .saturating_add(Weight::from_parts(632_902_702, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_222_329_000 picoseconds.
        Weight::from_parts(8_332_797_747, 0)
            // Standard Error: 4_510_501
            .saturating_add(Weight::from_parts(650_231_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 292_096_000 picoseconds.
        Weight::from_parts(364_103_540, 0)
            // Standard Error: 3_587_680
            .saturating_add(Weight::from_parts(724_562_895, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_017_710_000 picoseconds.
        Weight::from_parts(1_017_710_000, 0)
            // Standard Error: 2_021_107
            .saturating_add(Weight::from_parts(28_959_550, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_416_020_000 picoseconds.
        Weight::from_parts(8_512_091_798, 0)
            // Standard Error: 4_143_209
            .saturating_add(Weight::from_parts(649_601_260, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_826_000 picoseconds.
        Weight::from_parts(136_860_466, 0)
            // Standard Error: 4_134_285
            .saturating_add(Weight::from_parts(38_775_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 164_581_000 picoseconds.
        Weight::from_parts(162_320_818, 0)
            // Standard Error: 36_607
            .saturating_add(Weight::from_parts(490_799, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_326_000 picoseconds.
        Weight::from_parts(136_126_400, 0)
            // Standard Error: 3_618_046
            .saturating_add(Weight::from_parts(39_086_933, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 158_372_000 picoseconds.
        Weight::from_parts(161_149_866, 0)
            // Standard Error: 36_781
            .saturating_add(Weight::from_parts(500_370, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_449_000 picoseconds.
        Weight::from_parts(135_369_733, 0)
            // Standard Error: 2_949_992
            .saturating_add(Weight::from_parts(33_486_266, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_153_000 picoseconds.
        Weight::from_parts(135_004_266, 0)
            // Standard Error: 8_268_344
            .saturating_add(Weight::from_parts(54_360_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_983_000 picoseconds.
        Weight::from_parts(181_899_355, 0)
            // Standard Error: 1_985_440
            .saturating_add(Weight::from_parts(558_362_567, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 153_444_000 picoseconds.
        Weight::from_parts(153_444_000, 0)
            // Standard Error: 44_155
            .saturating_add(Weight::from_parts(809_062, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 762_577_000 picoseconds.
        Weight::from_parts(971_919_533, 0)
            // Standard Error: 271_283_106
            .saturating_add(Weight::from_parts(271_380_800, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 751_447_000 picoseconds.
        Weight::from_parts(971_484_666, 0)
            // Standard Error: 262_082_208
            .saturating_add(Weight::from_parts(160_273_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_605_000 picoseconds.
        Weight::from_parts(145_395_733, 0)
            // Standard Error: 2_101_702
            .saturating_add(Weight::from_parts(17_267_933, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 157_047_000 picoseconds.
        Weight::from_parts(161_306_057, 0)
            // Standard Error: 35_981
            .saturating_add(Weight::from_parts(482_275, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 138_120_000 picoseconds.
        Weight::from_parts(142_243_533, 0)
            // Standard Error: 1_085_630
            .saturating_add(Weight::from_parts(21_154_133, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 160_585_000 picoseconds.
        Weight::from_parts(162_625_242, 0)
            // Standard Error: 37_151
            .saturating_add(Weight::from_parts(482_108, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 129_241_000 picoseconds.
        Weight::from_parts(138_407_874, 0)
            // Standard Error: 1_228_916
            .saturating_add(Weight::from_parts(403_603_277, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_500_000 picoseconds.
        Weight::from_parts(141_978_449, 0)
            // Standard Error: 1_161_012
            .saturating_add(Weight::from_parts(400_717_543, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 776_927_000 picoseconds.
        Weight::from_parts(1_143_472_223, 0)
            // Standard Error: 16_108_941
            .saturating_add(Weight::from_parts(423_740_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 844_044_000 picoseconds.
        Weight::from_parts(1_203_054_969, 0)
            // Standard Error: 181_862
            .saturating_add(Weight::from_parts(248_190, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_881_700_000 picoseconds.
        Weight::from_parts(9_404_999_792, 0)
            // Standard Error: 18_784_283
            .saturating_add(Weight::from_parts(467_423_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_656_746_000 picoseconds.
        Weight::from_parts(10_112_762_775, 0)
            // Standard Error: 4_006_087
            .saturating_add(Weight::from_parts(21_344_529, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_013_000 picoseconds.
        Weight::from_parts(166_622_173, 0)
            // Standard Error: 1_474_041
            .saturating_add(Weight::from_parts(422_570_818, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 406_433_000 picoseconds.
        Weight::from_parts(406_433_000, 0)
            // Standard Error: 177_872
            .saturating_add(Weight::from_parts(25_562_088, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_800_000 picoseconds.
        Weight::from_parts(151_728_473, 0)
            // Standard Error: 1_400_308
            .saturating_add(Weight::from_parts(402_076_575, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 130_395_000 picoseconds.
        Weight::from_parts(132_730_600, 0)
            // Standard Error: 1_430_504
            .saturating_add(Weight::from_parts(48_853_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 128_912_000 picoseconds.
        Weight::from_parts(132_798_466, 0)
            // Standard Error: 907_733
            .saturating_add(Weight::from_parts(23_347_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 128_448_000 picoseconds.
        Weight::from_parts(131_918_133, 0)
            // Standard Error: 954_302
            .saturating_add(Weight::from_parts(20_923_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 128_792_000 picoseconds.
        Weight::from_parts(132_442_533, 0)
            // Standard Error: 7_519_802
            .saturating_add(Weight::from_parts(39_255_466, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_450_000 picoseconds.
        Weight::from_parts(136_071_466, 0)
            // Standard Error: 878_951
            .saturating_add(Weight::from_parts(18_949_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 208_596_000 picoseconds.
        Weight::from_parts(254_048_385, 0)
            // Standard Error: 3_564_045
            .saturating_add(Weight::from_parts(580_328_018, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 145_984_000 picoseconds.
        Weight::from_parts(178_921_195, 0)
            // Standard Error: 3_422_168
            .saturating_add(Weight::from_parts(814_535_003, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_536_232_000 picoseconds.
        Weight::from_parts(45_536_232_000, 0)
            // Standard Error: 2_340_672
            .saturating_add(Weight::from_parts(14_690_130, 0).saturating_mul(p.into()))
            // Standard Error: 2_340_514
            .saturating_add(Weight::from_parts(176_561_452, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 143_898_000 picoseconds.
        Weight::from_parts(142_874_456, 0)
            // Standard Error: 3_365_243
            .saturating_add(Weight::from_parts(815_042_695, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_057_335_000 picoseconds.
        Weight::from_parts(881_437_978, 0)
            // Standard Error: 4_235_431
            .saturating_add(Weight::from_parts(27_971_758, 0).saturating_mul(p.into()))
            // Standard Error: 4_237_225
            .saturating_add(Weight::from_parts(191_294_955, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_902_000 picoseconds.
        Weight::from_parts(152_226_960, 0)
            // Standard Error: 349_996
            .saturating_add(Weight::from_parts(7_411_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 136_727_000 picoseconds.
        Weight::from_parts(185_237_879, 1131)
            // Standard Error: 54_040
            .saturating_add(Weight::from_parts(12_926_303, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 135_854_000 picoseconds.
        Weight::from_parts(135_854_000, 1131)
            // Standard Error: 1_579_698
            .saturating_add(Weight::from_parts(45_550_987, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_782_941_000 picoseconds.
        Weight::from_parts(6_501_971_805, 5069931)
            // Standard Error: 3_014_704
            .saturating_add(Weight::from_parts(44_912_971, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1463 + p * (65580 ±0)`
        //  Estimated: `2109 + p * (75482 ±0)`
        // Minimum execution time: 134_280_000 picoseconds.
        Weight::from_parts(180_374_808, 2109)
            // Standard Error: 223_013
            .saturating_add(Weight::from_parts(46_671_288, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 140_587_000 picoseconds.
        Weight::from_parts(145_934_931, 1131)
            // Standard Error: 2_549_429
            .saturating_add(Weight::from_parts(42_316_470, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1961 + p * (9863 ±11)`
        // Minimum execution time: 961_572_000 picoseconds.
        Weight::from_parts(1_320_576_937, 1961)
            // Standard Error: 11_519_647
            .saturating_add(Weight::from_parts(45_540_268, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9863).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_242_924_000 picoseconds.
        Weight::from_parts(1_620_508_100, 317931)
            // Standard Error: 11_811_606
            .saturating_add(Weight::from_parts(51_158_057, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_520_000 picoseconds.
        Weight::from_parts(6_040_341, 0)
            // Standard Error: 187_624
            .saturating_add(Weight::from_parts(32_598_297, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_351_756_000 picoseconds.
        Weight::from_parts(4_184_741_400, 0)
            // Standard Error: 188_958
            .saturating_add(Weight::from_parts(4_290_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_371_989_000 picoseconds.
        Weight::from_parts(4_158_119_200, 0)
            // Standard Error: 241_988
            .saturating_add(Weight::from_parts(4_489_941, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_552_567_000 picoseconds.
        Weight::from_parts(10_207_391_044, 0)
            // Standard Error: 732_656
            .saturating_add(Weight::from_parts(13_129_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_849_408_000 picoseconds.
        Weight::from_parts(12_287_285_644, 0)
            // Standard Error: 661_755
            .saturating_add(Weight::from_parts(6_445_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_930_000 picoseconds.
        Weight::from_parts(462_610, 0)
            // Standard Error: 108_030
            .saturating_add(Weight::from_parts(3_922_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_920_000 picoseconds.
        Weight::from_parts(3_052_328, 0)
            // Standard Error: 63_474
            .saturating_add(Weight::from_parts(3_212_943, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_556_000 picoseconds.
        Weight::from_parts(7_226_086, 0)
            // Standard Error: 27_541
            .saturating_add(Weight::from_parts(1_579_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_077_000 picoseconds.
        Weight::from_parts(3_111_106, 0)
            // Standard Error: 69_372
            .saturating_add(Weight::from_parts(3_047_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_788_000 picoseconds.
        Weight::from_parts(6_984_181, 0)
            // Standard Error: 144_611
            .saturating_add(Weight::from_parts(4_939_903, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_180_000 picoseconds.
        Weight::from_parts(12_215_430, 0)
            // Standard Error: 3_029
            .saturating_add(Weight::from_parts(67_838, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_000_000 picoseconds.
        Weight::from_parts(7_496_859, 0)
            // Standard Error: 53_747
            .saturating_add(Weight::from_parts(2_644_946, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_644_946 -
            2_596_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_129_000 picoseconds.
        Weight::from_parts(5_855_606, 0)
            // Standard Error: 64_812
            .saturating_add(Weight::from_parts(2_596_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_555_000 picoseconds.
        Weight::from_parts(27_515_555, 0)
            // Standard Error: 374_909
            .saturating_add(Weight::from_parts(9_494_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 15_777_000 picoseconds.
        Weight::from_parts(9_975_479, 0)
            // Standard Error: 88_714
            .saturating_add(Weight::from_parts(865_667, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_163_000 picoseconds.
        Weight::from_parts(9_034_614, 0)
            // Standard Error: 475
            .saturating_add(Weight::from_parts(30, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_860_000 picoseconds.
        Weight::from_parts(5_598_849, 0)
            // Standard Error: 21_244
            .saturating_add(Weight::from_parts(272_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_020_000 picoseconds.
        Weight::from_parts(3_284_159, 0)
            // Standard Error: 61_566
            .saturating_add(Weight::from_parts(727_001, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_031_000 picoseconds.
        Weight::from_parts(2_117_833, 0)
            // Standard Error: 55_439
            .saturating_add(Weight::from_parts(840_985, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_473_000 picoseconds.
        Weight::from_parts(8_758_437, 0)
            // Standard Error: 43_657
            .saturating_add(Weight::from_parts(545_402, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_759_000 picoseconds.
        Weight::from_parts(5_727_182, 0)
            // Standard Error: 78_845
            .saturating_add(Weight::from_parts(1_003_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_783_000 picoseconds.
        Weight::from_parts(10_001_928, 0)
            // Standard Error: 91_607
            .saturating_add(Weight::from_parts(8_568_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_953_000 picoseconds.
        Weight::from_parts(762_225, 0)
            // Standard Error: 160_373
            .saturating_add(Weight::from_parts(3_231_352, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_127_000 picoseconds.
        Weight::from_parts(2_471_943, 0)
            // Standard Error: 125_498
            .saturating_add(Weight::from_parts(2_894_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_463_000 picoseconds.
        Weight::from_parts(1_659_568, 0)
            // Standard Error: 132_432
            .saturating_add(Weight::from_parts(3_021_647, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_011_000 picoseconds.
        Weight::from_parts(5_392_335, 0)
            // Standard Error: 89_547
            .saturating_add(Weight::from_parts(2_419_476, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_127_000 picoseconds.
        Weight::from_parts(4_258_625, 0)
            // Standard Error: 37_712
            .saturating_add(Weight::from_parts(550_855, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_048_000 picoseconds.
        Weight::from_parts(4_742_367, 0)
            // Standard Error: 36_916
            .saturating_add(Weight::from_parts(426_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_018_000 picoseconds.
        Weight::from_parts(5_018_000, 0)
            // Standard Error: 82_100
            .saturating_add(Weight::from_parts(1_615_353, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_109_000 picoseconds.
        Weight::from_parts(5_109_000, 0)
            // Standard Error: 76_873
            .saturating_add(Weight::from_parts(1_236_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_003_000 picoseconds.
        Weight::from_parts(5_935_884, 0)
            // Standard Error: 24_520
            .saturating_add(Weight::from_parts(361_870, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_912_000 picoseconds.
        Weight::from_parts(3_769_771, 0)
            // Standard Error: 40_538
            .saturating_add(Weight::from_parts(505_812, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_178_000 picoseconds.
        Weight::from_parts(3_607_654, 0)
            // Standard Error: 56_577
            .saturating_add(Weight::from_parts(624_229, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_111_000 picoseconds.
        Weight::from_parts(1_781_920, 0)
            // Standard Error: 54_149
            .saturating_add(Weight::from_parts(659_652, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_896_000 picoseconds.
        Weight::from_parts(1_551_997, 0)
            // Standard Error: 76_438
            .saturating_add(Weight::from_parts(649_009, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_849_000 picoseconds.
        Weight::from_parts(4_166_745, 0)
            // Standard Error: 35_437
            .saturating_add(Weight::from_parts(370_747, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_938_000 picoseconds.
        Weight::from_parts(5_547_916, 0)
            // Standard Error: 52_758
            .saturating_add(Weight::from_parts(219_309, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_948_000 picoseconds.
        Weight::from_parts(5_456_014, 0)
            // Standard Error: 15_941
            .saturating_add(Weight::from_parts(221_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_946_000 picoseconds.
        Weight::from_parts(4_946_000, 0)
            // Standard Error: 84_991
            .saturating_add(Weight::from_parts(1_494_917, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_965_000 picoseconds.
        Weight::from_parts(1_873_292, 0)
            // Standard Error: 99_782
            .saturating_add(Weight::from_parts(1_174_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_036_000 picoseconds.
        Weight::from_parts(343_457, 0)
            // Standard Error: 173_276
            .saturating_add(Weight::from_parts(1_504_541, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_045_000 picoseconds.
        Weight::from_parts(1_703_263, 0)
            // Standard Error: 105_402
            .saturating_add(Weight::from_parts(1_015_779, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_999_000 picoseconds.
        Weight::from_parts(4_999_000, 0)
            // Standard Error: 83_121
            .saturating_add(Weight::from_parts(1_443_031, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_911_000 picoseconds.
        Weight::from_parts(4_911_000, 0)
            // Standard Error: 51_103
            .saturating_add(Weight::from_parts(1_180_955, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_827_000 picoseconds.
        Weight::from_parts(4_827_000, 0)
            // Standard Error: 90_882
            .saturating_add(Weight::from_parts(1_377_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_885_000 picoseconds.
        Weight::from_parts(2_520_110, 0)
            // Standard Error: 111_938
            .saturating_add(Weight::from_parts(963_941, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_964_000 picoseconds.
        Weight::from_parts(4_964_000, 0)
            // Standard Error: 97_292
            .saturating_add(Weight::from_parts(1_460_749, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_991_000 picoseconds.
        Weight::from_parts(4_991_000, 0)
            // Standard Error: 61_753
            .saturating_add(Weight::from_parts(999_598, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_423_000 picoseconds.
        Weight::from_parts(5_423_000, 0)
            // Standard Error: 79_254
            .saturating_add(Weight::from_parts(1_732_318, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_132_000 picoseconds.
        Weight::from_parts(3_535_228, 0)
            // Standard Error: 103_743
            .saturating_add(Weight::from_parts(1_054_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_181_000 picoseconds.
        Weight::from_parts(5_181_000, 0)
            // Standard Error: 86_258
            .saturating_add(Weight::from_parts(1_522_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_846_000 picoseconds.
        Weight::from_parts(3_889_303, 0)
            // Standard Error: 72_330
            .saturating_add(Weight::from_parts(923_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_852_000 picoseconds.
        Weight::from_parts(4_852_000, 0)
            // Standard Error: 94_145
            .saturating_add(Weight::from_parts(1_737_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_197_000 picoseconds.
        Weight::from_parts(2_127_598, 0)
            // Standard Error: 77_315
            .saturating_add(Weight::from_parts(1_118_607, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_975_000 picoseconds.
        Weight::from_parts(4_975_000, 0)
            // Standard Error: 87_739
            .saturating_add(Weight::from_parts(1_460_094, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_943_000 picoseconds.
        Weight::from_parts(4_943_000, 0)
            // Standard Error: 66_641
            .saturating_add(Weight::from_parts(1_261_131, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_920_000 picoseconds.
        Weight::from_parts(4_980_902, 0)
            // Standard Error: 176_146
            .saturating_add(Weight::from_parts(1_604_121, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_998_000 picoseconds.
        Weight::from_parts(1_048_695, 0)
            // Standard Error: 124_055
            .saturating_add(Weight::from_parts(1_201_012, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_003_000 picoseconds.
        Weight::from_parts(5_003_000, 0)
            // Standard Error: 61_395
            .saturating_add(Weight::from_parts(1_030_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_086_000 picoseconds.
        Weight::from_parts(2_359_514, 0)
            // Standard Error: 88_069
            .saturating_add(Weight::from_parts(824_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_824_000 picoseconds.
        Weight::from_parts(4_824_000, 0)
            // Standard Error: 60_868
            .saturating_add(Weight::from_parts(1_253_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_917_000 picoseconds.
        Weight::from_parts(2_188_099, 0)
            // Standard Error: 67_994
            .saturating_add(Weight::from_parts(834_462, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_040_000 picoseconds.
        Weight::from_parts(5_040_000, 0)
            // Standard Error: 68_687
            .saturating_add(Weight::from_parts(1_636_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_015_000 picoseconds.
        Weight::from_parts(1_070_937, 0)
            // Standard Error: 126_779
            .saturating_add(Weight::from_parts(1_143_211, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_986_000 picoseconds.
        Weight::from_parts(1_017_171, 0)
            // Standard Error: 102_606
            .saturating_add(Weight::from_parts(2_256_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_887_000 picoseconds.
        Weight::from_parts(8_328_517, 0)
            // Standard Error: 132_856
            .saturating_add(Weight::from_parts(1_833_520, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_893_000 picoseconds.
        Weight::from_parts(2_394_024, 0)
            // Standard Error: 166_462
            .saturating_add(Weight::from_parts(2_484_519, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_957_000 picoseconds.
        Weight::from_parts(4_957_000, 0)
            // Standard Error: 77_312
            .saturating_add(Weight::from_parts(1_882_041, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_897_000 picoseconds.
        Weight::from_parts(4_897_000, 0)
            // Standard Error: 220_628
            .saturating_add(Weight::from_parts(8_483_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_991_000 picoseconds.
        Weight::from_parts(4_991_000, 0)
            // Standard Error: 105_292
            .saturating_add(Weight::from_parts(6_306_017, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_984_000 picoseconds.
        Weight::from_parts(5_501_442, 0)
            // Standard Error: 125_962
            .saturating_add(Weight::from_parts(2_272_177, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_903_000 picoseconds.
        Weight::from_parts(4_300_387, 0)
            // Standard Error: 143_917
            .saturating_add(Weight::from_parts(2_117_233, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_961_000 picoseconds.
        Weight::from_parts(4_961_000, 0)
            // Standard Error: 60_588
            .saturating_add(Weight::from_parts(1_187_055, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_101_000 picoseconds.
        Weight::from_parts(5_515_461, 0)
            // Standard Error: 69_865
            .saturating_add(Weight::from_parts(750_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_851_000 picoseconds.
        Weight::from_parts(2_428_919, 0)
            // Standard Error: 103_431
            .saturating_add(Weight::from_parts(1_138_461, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_042_000 picoseconds.
        Weight::from_parts(2_653_128, 0)
            // Standard Error: 92_948
            .saturating_add(Weight::from_parts(808_115, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_042_000 picoseconds.
        Weight::from_parts(2_812_805, 0)
            // Standard Error: 112_299
            .saturating_add(Weight::from_parts(1_343_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_021_000 picoseconds.
        Weight::from_parts(2_254_890, 0)
            // Standard Error: 59_218
            .saturating_add(Weight::from_parts(842_154, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_007_000 picoseconds.
        Weight::from_parts(1_621_742, 0)
            // Standard Error: 89_464
            .saturating_add(Weight::from_parts(1_373_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_168_000 picoseconds.
        Weight::from_parts(1_396_510, 0)
            // Standard Error: 67_584
            .saturating_add(Weight::from_parts(1_004_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_175_000 picoseconds.
        Weight::from_parts(3_275_983, 0)
            // Standard Error: 85_893
            .saturating_add(Weight::from_parts(1_340_897, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_990_000 picoseconds.
        Weight::from_parts(4_343_373, 0)
            // Standard Error: 55_721
            .saturating_add(Weight::from_parts(652_106, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_948_000 picoseconds.
        Weight::from_parts(4_948_000, 0)
            // Standard Error: 51_157
            .saturating_add(Weight::from_parts(1_215_919, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_081_000 picoseconds.
        Weight::from_parts(1_266_162, 0)
            // Standard Error: 63_862
            .saturating_add(Weight::from_parts(802_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_165_000 picoseconds.
        Weight::from_parts(1_145_541, 0)
            // Standard Error: 104_401
            .saturating_add(Weight::from_parts(1_299_641, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_937_000 picoseconds.
        Weight::from_parts(3_275_383, 0)
            // Standard Error: 102_972
            .saturating_add(Weight::from_parts(905_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_885_000 picoseconds.
        Weight::from_parts(2_662_775, 0)
            // Standard Error: 70_659
            .saturating_add(Weight::from_parts(1_256_616, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_275_000 picoseconds.
        Weight::from_parts(2_157_380, 0)
            // Standard Error: 42_840
            .saturating_add(Weight::from_parts(988_156, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_040_000 picoseconds.
        Weight::from_parts(2_040_000, 0)
            // Standard Error: 18_979
            .saturating_add(Weight::from_parts(334_739, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3504 + c * (1024 ±0)`
        // Minimum execution time: 4_357_000 picoseconds.
        Weight::from_parts(4_357_000, 3504)
            // Standard Error: 5_047
            .saturating_add(Weight::from_parts(686_014, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_996_000 picoseconds.
        Weight::from_parts(108_899_275, 0)
            // Standard Error: 71_361
            .saturating_add(Weight::from_parts(2_496_736, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 131_854_000 picoseconds.
        Weight::from_parts(132_338_000, 42236)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 82_431_000 picoseconds.
        Weight::from_parts(83_345_000, 21261)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 43_182_000 picoseconds.
        Weight::from_parts(44_504_000, 17070)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7639`
        // Minimum execution time: 12_865_000 picoseconds.
        Weight::from_parts(9_458_636, 7639)
            // Standard Error: 178_801
            .saturating_add(Weight::from_parts(17_362_166, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1359 + c * (16389 ±0)`
        //  Estimated: `41342 + c * (131112 ±0)`
        // Minimum execution time: 104_945_000 picoseconds.
        Weight::from_parts(104_945_000, 41342)
            // Standard Error: 735_082
            .saturating_add(Weight::from_parts(54_746_784, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 97_584_000 picoseconds.
        Weight::from_parts(79_621_753, 4990)
            // Standard Error: 1_263_173
            .saturating_add(Weight::from_parts(67_550_804, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `738`
        //  Estimated: `39375`
        // Minimum execution time: 107_398_000 picoseconds.
        Weight::from_parts(128_550_515, 39375)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(2_580, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 11_014_116_000 picoseconds.
        Weight::from_parts(119_918_796, 34312)
            // Standard Error: 1_663_676
            .saturating_add(Weight::from_parts(68_050_564, 0).saturating_mul(c.into()))
            // Standard Error: 99
            .saturating_add(Weight::from_parts(2_559, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 93_486_000 picoseconds.
        Weight::from_parts(78_861_752, 23853)
            // Standard Error: 38
            .saturating_add(Weight::from_parts(1_241, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 98_145_000 picoseconds.
        Weight::from_parts(83_098_084, 27177)
            // Standard Error: 36
            .saturating_add(Weight::from_parts(1_237, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 132_366_000 picoseconds.
        Weight::from_parts(107_560_867, 42227)
            // Standard Error: 42
            .saturating_add(Weight::from_parts(1_281, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 150_229_000 picoseconds.
        Weight::from_parts(133_309_524, 45757)
            // Standard Error: 41
            .saturating_add(Weight::from_parts(1_281, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74787`
        // Minimum execution time: 477_638_000 picoseconds.
        Weight::from_parts(516_823_011, 74787)
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74211`
        // Minimum execution time: 501_571_000 picoseconds.
        Weight::from_parts(539_615_324, 74211)
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `221 + c * (1075 ±0)`
        //  Estimated: `3951 + c * (2150 ±0)`
        // Minimum execution time: 71_212_000 picoseconds.
        Weight::from_parts(71_212_000, 3951)
            // Standard Error: 389_589
            .saturating_add(Weight::from_parts(65_630_946, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 135_371_000 picoseconds.
        Weight::from_parts(135_371_000, 0)
            // Standard Error: 14_948_038
            .saturating_add(Weight::from_parts(803_936_293, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 657_847_000 picoseconds.
        Weight::from_parts(613_849_012, 0)
            // Standard Error: 51_209
            .saturating_add(Weight::from_parts(27_902_292, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 416_038_000 picoseconds.
        Weight::from_parts(464_063_936, 0)
            // Standard Error: 1_449_692
            .saturating_add(Weight::from_parts(282_581_940, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_156_000 picoseconds.
        Weight::from_parts(147_882_974, 0)
            // Standard Error: 44_524
            .saturating_add(Weight::from_parts(6_555_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 201_069_000 picoseconds.
        Weight::from_parts(246_783_182, 0)
            // Standard Error: 63_375
            .saturating_add(Weight::from_parts(7_257_624, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 135_271_000 picoseconds.
        Weight::from_parts(197_973_307, 0)
            // Standard Error: 2_211_133
            .saturating_add(Weight::from_parts(407_032_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 136_098_000 picoseconds.
        Weight::from_parts(139_358_766, 0)
            // Standard Error: 987_309
            .saturating_add(Weight::from_parts(405_184_746, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_901_000 picoseconds.
        Weight::from_parts(165_337_673, 0)
            // Standard Error: 1_052_296
            .saturating_add(Weight::from_parts(404_303_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_101_000 picoseconds.
        Weight::from_parts(156_597_967, 0)
            // Standard Error: 1_379_125
            .saturating_add(Weight::from_parts(400_240_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_975_000 picoseconds.
        Weight::from_parts(143_901_198, 0)
            // Standard Error: 1_309_142
            .saturating_add(Weight::from_parts(394_058_514, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_153_000 picoseconds.
        Weight::from_parts(138_063_815, 0)
            // Standard Error: 1_073_912
            .saturating_add(Weight::from_parts(399_894_755, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_236_000 picoseconds.
        Weight::from_parts(163_945_474, 0)
            // Standard Error: 1_074_912
            .saturating_add(Weight::from_parts(396_392_422, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_870_000 picoseconds.
        Weight::from_parts(141_867_718, 0)
            // Standard Error: 1_267_652
            .saturating_add(Weight::from_parts(398_787_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 789_856_000 picoseconds.
        Weight::from_parts(1_200_539_421, 0)
            // Standard Error: 15_420_720
            .saturating_add(Weight::from_parts(540_755_105, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_243_958_000 picoseconds.
        Weight::from_parts(1_243_958_000, 0)
            // Standard Error: 258_385
            .saturating_add(Weight::from_parts(14_060_304, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_559_000 picoseconds.
        Weight::from_parts(148_433_924, 0)
            // Standard Error: 1_054_983
            .saturating_add(Weight::from_parts(400_274_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 137_838_000 picoseconds.
        Weight::from_parts(146_592_236, 0)
            // Standard Error: 1_191_929
            .saturating_add(Weight::from_parts(393_602_246, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_735_000 picoseconds.
        Weight::from_parts(167_854_405, 0)
            // Standard Error: 1_719_090
            .saturating_add(Weight::from_parts(491_520_041, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 135_271_000 picoseconds.
        Weight::from_parts(135_271_000, 0)
            // Standard Error: 21_084_025
            .saturating_add(Weight::from_parts(1_754_773_596, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 136_135_000 picoseconds.
        Weight::from_parts(226_241_059, 0)
            // Standard Error: 3_740_718
            .saturating_add(Weight::from_parts(701_643_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 824_985_000 picoseconds.
        Weight::from_parts(824_985_000, 0)
            // Standard Error: 2_034_835
            .saturating_add(Weight::from_parts(28_759_420, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_440_000 picoseconds.
        Weight::from_parts(249_501_401, 0)
            // Standard Error: 4_152_149
            .saturating_add(Weight::from_parts(702_272_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 821_633_000 picoseconds.
        Weight::from_parts(821_633_000, 0)
            // Standard Error: 2_046_694
            .saturating_add(Weight::from_parts(29_562_199, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 765_983_000 picoseconds.
        Weight::from_parts(1_205_656_738, 0)
            // Standard Error: 18_904_741
            .saturating_add(Weight::from_parts(720_998_808, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 776_055_000 picoseconds.
        Weight::from_parts(1_207_173_026, 0)
            // Standard Error: 19_488_793
            .saturating_add(Weight::from_parts(727_336_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_521_000 picoseconds.
        Weight::from_parts(135_984_354, 0)
            // Standard Error: 1_406_845
            .saturating_add(Weight::from_parts(410_737_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_218_535_000 picoseconds.
        Weight::from_parts(8_307_074_386, 0)
            // Standard Error: 2_841_243
            .saturating_add(Weight::from_parts(585_692_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 980_470_000 picoseconds.
        Weight::from_parts(980_470_000, 0)
            // Standard Error: 2_074_734
            .saturating_add(Weight::from_parts(39_688_678, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_220_727_000 picoseconds.
        Weight::from_parts(8_298_752_854, 0)
            // Standard Error: 3_966_870
            .saturating_add(Weight::from_parts(632_902_702, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_222_329_000 picoseconds.
        Weight::from_parts(8_332_797_747, 0)
            // Standard Error: 4_510_501
            .saturating_add(Weight::from_parts(650_231_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 292_096_000 picoseconds.
        Weight::from_parts(364_103_540, 0)
            // Standard Error: 3_587_680
            .saturating_add(Weight::from_parts(724_562_895, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_017_710_000 picoseconds.
        Weight::from_parts(1_017_710_000, 0)
            // Standard Error: 2_021_107
            .saturating_add(Weight::from_parts(28_959_550, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_416_020_000 picoseconds.
        Weight::from_parts(8_512_091_798, 0)
            // Standard Error: 4_143_209
            .saturating_add(Weight::from_parts(649_601_260, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_826_000 picoseconds.
        Weight::from_parts(136_860_466, 0)
            // Standard Error: 4_134_285
            .saturating_add(Weight::from_parts(38_775_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 164_581_000 picoseconds.
        Weight::from_parts(162_320_818, 0)
            // Standard Error: 36_607
            .saturating_add(Weight::from_parts(490_799, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_326_000 picoseconds.
        Weight::from_parts(136_126_400, 0)
            // Standard Error: 3_618_046
            .saturating_add(Weight::from_parts(39_086_933, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 158_372_000 picoseconds.
        Weight::from_parts(161_149_866, 0)
            // Standard Error: 36_781
            .saturating_add(Weight::from_parts(500_370, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_449_000 picoseconds.
        Weight::from_parts(135_369_733, 0)
            // Standard Error: 2_949_992
            .saturating_add(Weight::from_parts(33_486_266, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_153_000 picoseconds.
        Weight::from_parts(135_004_266, 0)
            // Standard Error: 8_268_344
            .saturating_add(Weight::from_parts(54_360_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_983_000 picoseconds.
        Weight::from_parts(181_899_355, 0)
            // Standard Error: 1_985_440
            .saturating_add(Weight::from_parts(558_362_567, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 153_444_000 picoseconds.
        Weight::from_parts(153_444_000, 0)
            // Standard Error: 44_155
            .saturating_add(Weight::from_parts(809_062, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 762_577_000 picoseconds.
        Weight::from_parts(971_919_533, 0)
            // Standard Error: 271_283_106
            .saturating_add(Weight::from_parts(271_380_800, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 751_447_000 picoseconds.
        Weight::from_parts(971_484_666, 0)
            // Standard Error: 262_082_208
            .saturating_add(Weight::from_parts(160_273_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_605_000 picoseconds.
        Weight::from_parts(145_395_733, 0)
            // Standard Error: 2_101_702
            .saturating_add(Weight::from_parts(17_267_933, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 157_047_000 picoseconds.
        Weight::from_parts(161_306_057, 0)
            // Standard Error: 35_981
            .saturating_add(Weight::from_parts(482_275, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 138_120_000 picoseconds.
        Weight::from_parts(142_243_533, 0)
            // Standard Error: 1_085_630
            .saturating_add(Weight::from_parts(21_154_133, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 160_585_000 picoseconds.
        Weight::from_parts(162_625_242, 0)
            // Standard Error: 37_151
            .saturating_add(Weight::from_parts(482_108, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 129_241_000 picoseconds.
        Weight::from_parts(138_407_874, 0)
            // Standard Error: 1_228_916
            .saturating_add(Weight::from_parts(403_603_277, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_500_000 picoseconds.
        Weight::from_parts(141_978_449, 0)
            // Standard Error: 1_161_012
            .saturating_add(Weight::from_parts(400_717_543, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 776_927_000 picoseconds.
        Weight::from_parts(1_143_472_223, 0)
            // Standard Error: 16_108_941
            .saturating_add(Weight::from_parts(423_740_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 844_044_000 picoseconds.
        Weight::from_parts(1_203_054_969, 0)
            // Standard Error: 181_862
            .saturating_add(Weight::from_parts(248_190, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_881_700_000 picoseconds.
        Weight::from_parts(9_404_999_792, 0)
            // Standard Error: 18_784_283
            .saturating_add(Weight::from_parts(467_423_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_656_746_000 picoseconds.
        Weight::from_parts(10_112_762_775, 0)
            // Standard Error: 4_006_087
            .saturating_add(Weight::from_parts(21_344_529, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_013_000 picoseconds.
        Weight::from_parts(166_622_173, 0)
            // Standard Error: 1_474_041
            .saturating_add(Weight::from_parts(422_570_818, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 406_433_000 picoseconds.
        Weight::from_parts(406_433_000, 0)
            // Standard Error: 177_872
            .saturating_add(Weight::from_parts(25_562_088, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_800_000 picoseconds.
        Weight::from_parts(151_728_473, 0)
            // Standard Error: 1_400_308
            .saturating_add(Weight::from_parts(402_076_575, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 130_395_000 picoseconds.
        Weight::from_parts(132_730_600, 0)
            // Standard Error: 1_430_504
            .saturating_add(Weight::from_parts(48_853_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 128_912_000 picoseconds.
        Weight::from_parts(132_798_466, 0)
            // Standard Error: 907_733
            .saturating_add(Weight::from_parts(23_347_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 128_448_000 picoseconds.
        Weight::from_parts(131_918_133, 0)
            // Standard Error: 954_302
            .saturating_add(Weight::from_parts(20_923_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 128_792_000 picoseconds.
        Weight::from_parts(132_442_533, 0)
            // Standard Error: 7_519_802
            .saturating_add(Weight::from_parts(39_255_466, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_450_000 picoseconds.
        Weight::from_parts(136_071_466, 0)
            // Standard Error: 878_951
            .saturating_add(Weight::from_parts(18_949_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 208_596_000 picoseconds.
        Weight::from_parts(254_048_385, 0)
            // Standard Error: 3_564_045
            .saturating_add(Weight::from_parts(580_328_018, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 145_984_000 picoseconds.
        Weight::from_parts(178_921_195, 0)
            // Standard Error: 3_422_168
            .saturating_add(Weight::from_parts(814_535_003, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_536_232_000 picoseconds.
        Weight::from_parts(45_536_232_000, 0)
            // Standard Error: 2_340_672
            .saturating_add(Weight::from_parts(14_690_130, 0).saturating_mul(p.into()))
            // Standard Error: 2_340_514
            .saturating_add(Weight::from_parts(176_561_452, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 143_898_000 picoseconds.
        Weight::from_parts(142_874_456, 0)
            // Standard Error: 3_365_243
            .saturating_add(Weight::from_parts(815_042_695, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_057_335_000 picoseconds.
        Weight::from_parts(881_437_978, 0)
            // Standard Error: 4_235_431
            .saturating_add(Weight::from_parts(27_971_758, 0).saturating_mul(p.into()))
            // Standard Error: 4_237_225
            .saturating_add(Weight::from_parts(191_294_955, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_902_000 picoseconds.
        Weight::from_parts(152_226_960, 0)
            // Standard Error: 349_996
            .saturating_add(Weight::from_parts(7_411_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 136_727_000 picoseconds.
        Weight::from_parts(185_237_879, 1131)
            // Standard Error: 54_040
            .saturating_add(Weight::from_parts(12_926_303, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 135_854_000 picoseconds.
        Weight::from_parts(135_854_000, 1131)
            // Standard Error: 1_579_698
            .saturating_add(Weight::from_parts(45_550_987, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_782_941_000 picoseconds.
        Weight::from_parts(6_501_971_805, 5069931)
            // Standard Error: 3_014_704
            .saturating_add(Weight::from_parts(44_912_971, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1463 + p * (65580 ±0)`
        //  Estimated: `2109 + p * (75482 ±0)`
        // Minimum execution time: 134_280_000 picoseconds.
        Weight::from_parts(180_374_808, 2109)
            // Standard Error: 223_013
            .saturating_add(Weight::from_parts(46_671_288, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 140_587_000 picoseconds.
        Weight::from_parts(145_934_931, 1131)
            // Standard Error: 2_549_429
            .saturating_add(Weight::from_parts(42_316_470, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1961 + p * (9863 ±11)`
        // Minimum execution time: 961_572_000 picoseconds.
        Weight::from_parts(1_320_576_937, 1961)
            // Standard Error: 11_519_647
            .saturating_add(Weight::from_parts(45_540_268, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9863).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_242_924_000 picoseconds.
        Weight::from_parts(1_620_508_100, 317931)
            // Standard Error: 11_811_606
            .saturating_add(Weight::from_parts(51_158_057, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_520_000 picoseconds.
        Weight::from_parts(6_040_341, 0)
            // Standard Error: 187_624
            .saturating_add(Weight::from_parts(32_598_297, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_351_756_000 picoseconds.
        Weight::from_parts(4_184_741_400, 0)
            // Standard Error: 188_958
            .saturating_add(Weight::from_parts(4_290_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_371_989_000 picoseconds.
        Weight::from_parts(4_158_119_200, 0)
            // Standard Error: 241_988
            .saturating_add(Weight::from_parts(4_489_941, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_552_567_000 picoseconds.
        Weight::from_parts(10_207_391_044, 0)
            // Standard Error: 732_656
            .saturating_add(Weight::from_parts(13_129_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_849_408_000 picoseconds.
        Weight::from_parts(12_287_285_644, 0)
            // Standard Error: 661_755
            .saturating_add(Weight::from_parts(6_445_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_930_000 picoseconds.
        Weight::from_parts(462_610, 0)
            // Standard Error: 108_030
            .saturating_add(Weight::from_parts(3_922_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_920_000 picoseconds.
        Weight::from_parts(3_052_328, 0)
            // Standard Error: 63_474
            .saturating_add(Weight::from_parts(3_212_943, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_556_000 picoseconds.
        Weight::from_parts(7_226_086, 0)
            // Standard Error: 27_541
            .saturating_add(Weight::from_parts(1_579_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_077_000 picoseconds.
        Weight::from_parts(3_111_106, 0)
            // Standard Error: 69_372
            .saturating_add(Weight::from_parts(3_047_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_788_000 picoseconds.
        Weight::from_parts(6_984_181, 0)
            // Standard Error: 144_611
            .saturating_add(Weight::from_parts(4_939_903, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_180_000 picoseconds.
        Weight::from_parts(12_215_430, 0)
            // Standard Error: 3_029
            .saturating_add(Weight::from_parts(67_838, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_000_000 picoseconds.
        Weight::from_parts(7_496_859, 0)
            // Standard Error: 53_747
            .saturating_add(Weight::from_parts(2_644_946, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_644_946 -
            2_596_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_129_000 picoseconds.
        Weight::from_parts(5_855_606, 0)
            // Standard Error: 64_812
            .saturating_add(Weight::from_parts(2_596_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_555_000 picoseconds.
        Weight::from_parts(27_515_555, 0)
            // Standard Error: 374_909
            .saturating_add(Weight::from_parts(9_494_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 15_777_000 picoseconds.
        Weight::from_parts(9_975_479, 0)
            // Standard Error: 88_714
            .saturating_add(Weight::from_parts(865_667, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_163_000 picoseconds.
        Weight::from_parts(9_034_614, 0)
            // Standard Error: 475
            .saturating_add(Weight::from_parts(30, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_860_000 picoseconds.
        Weight::from_parts(5_598_849, 0)
            // Standard Error: 21_244
            .saturating_add(Weight::from_parts(272_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_020_000 picoseconds.
        Weight::from_parts(3_284_159, 0)
            // Standard Error: 61_566
            .saturating_add(Weight::from_parts(727_001, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_031_000 picoseconds.
        Weight::from_parts(2_117_833, 0)
            // Standard Error: 55_439
            .saturating_add(Weight::from_parts(840_985, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_473_000 picoseconds.
        Weight::from_parts(8_758_437, 0)
            // Standard Error: 43_657
            .saturating_add(Weight::from_parts(545_402, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_759_000 picoseconds.
        Weight::from_parts(5_727_182, 0)
            // Standard Error: 78_845
            .saturating_add(Weight::from_parts(1_003_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_783_000 picoseconds.
        Weight::from_parts(10_001_928, 0)
            // Standard Error: 91_607
            .saturating_add(Weight::from_parts(8_568_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_953_000 picoseconds.
        Weight::from_parts(762_225, 0)
            // Standard Error: 160_373
            .saturating_add(Weight::from_parts(3_231_352, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_127_000 picoseconds.
        Weight::from_parts(2_471_943, 0)
            // Standard Error: 125_498
            .saturating_add(Weight::from_parts(2_894_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_463_000 picoseconds.
        Weight::from_parts(1_659_568, 0)
            // Standard Error: 132_432
            .saturating_add(Weight::from_parts(3_021_647, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_011_000 picoseconds.
        Weight::from_parts(5_392_335, 0)
            // Standard Error: 89_547
            .saturating_add(Weight::from_parts(2_419_476, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_127_000 picoseconds.
        Weight::from_parts(4_258_625, 0)
            // Standard Error: 37_712
            .saturating_add(Weight::from_parts(550_855, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_048_000 picoseconds.
        Weight::from_parts(4_742_367, 0)
            // Standard Error: 36_916
            .saturating_add(Weight::from_parts(426_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_018_000 picoseconds.
        Weight::from_parts(5_018_000, 0)
            // Standard Error: 82_100
            .saturating_add(Weight::from_parts(1_615_353, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_109_000 picoseconds.
        Weight::from_parts(5_109_000, 0)
            // Standard Error: 76_873
            .saturating_add(Weight::from_parts(1_236_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_003_000 picoseconds.
        Weight::from_parts(5_935_884, 0)
            // Standard Error: 24_520
            .saturating_add(Weight::from_parts(361_870, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_912_000 picoseconds.
        Weight::from_parts(3_769_771, 0)
            // Standard Error: 40_538
            .saturating_add(Weight::from_parts(505_812, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_178_000 picoseconds.
        Weight::from_parts(3_607_654, 0)
            // Standard Error: 56_577
            .saturating_add(Weight::from_parts(624_229, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_111_000 picoseconds.
        Weight::from_parts(1_781_920, 0)
            // Standard Error: 54_149
            .saturating_add(Weight::from_parts(659_652, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_896_000 picoseconds.
        Weight::from_parts(1_551_997, 0)
            // Standard Error: 76_438
            .saturating_add(Weight::from_parts(649_009, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_849_000 picoseconds.
        Weight::from_parts(4_166_745, 0)
            // Standard Error: 35_437
            .saturating_add(Weight::from_parts(370_747, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_938_000 picoseconds.
        Weight::from_parts(5_547_916, 0)
            // Standard Error: 52_758
            .saturating_add(Weight::from_parts(219_309, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_948_000 picoseconds.
        Weight::from_parts(5_456_014, 0)
            // Standard Error: 15_941
            .saturating_add(Weight::from_parts(221_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_946_000 picoseconds.
        Weight::from_parts(4_946_000, 0)
            // Standard Error: 84_991
            .saturating_add(Weight::from_parts(1_494_917, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_965_000 picoseconds.
        Weight::from_parts(1_873_292, 0)
            // Standard Error: 99_782
            .saturating_add(Weight::from_parts(1_174_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_036_000 picoseconds.
        Weight::from_parts(343_457, 0)
            // Standard Error: 173_276
            .saturating_add(Weight::from_parts(1_504_541, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_045_000 picoseconds.
        Weight::from_parts(1_703_263, 0)
            // Standard Error: 105_402
            .saturating_add(Weight::from_parts(1_015_779, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_999_000 picoseconds.
        Weight::from_parts(4_999_000, 0)
            // Standard Error: 83_121
            .saturating_add(Weight::from_parts(1_443_031, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_911_000 picoseconds.
        Weight::from_parts(4_911_000, 0)
            // Standard Error: 51_103
            .saturating_add(Weight::from_parts(1_180_955, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_827_000 picoseconds.
        Weight::from_parts(4_827_000, 0)
            // Standard Error: 90_882
            .saturating_add(Weight::from_parts(1_377_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_885_000 picoseconds.
        Weight::from_parts(2_520_110, 0)
            // Standard Error: 111_938
            .saturating_add(Weight::from_parts(963_941, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_964_000 picoseconds.
        Weight::from_parts(4_964_000, 0)
            // Standard Error: 97_292
            .saturating_add(Weight::from_parts(1_460_749, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_991_000 picoseconds.
        Weight::from_parts(4_991_000, 0)
            // Standard Error: 61_753
            .saturating_add(Weight::from_parts(999_598, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_423_000 picoseconds.
        Weight::from_parts(5_423_000, 0)
            // Standard Error: 79_254
            .saturating_add(Weight::from_parts(1_732_318, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_132_000 picoseconds.
        Weight::from_parts(3_535_228, 0)
            // Standard Error: 103_743
            .saturating_add(Weight::from_parts(1_054_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_181_000 picoseconds.
        Weight::from_parts(5_181_000, 0)
            // Standard Error: 86_258
            .saturating_add(Weight::from_parts(1_522_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_846_000 picoseconds.
        Weight::from_parts(3_889_303, 0)
            // Standard Error: 72_330
            .saturating_add(Weight::from_parts(923_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_852_000 picoseconds.
        Weight::from_parts(4_852_000, 0)
            // Standard Error: 94_145
            .saturating_add(Weight::from_parts(1_737_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_197_000 picoseconds.
        Weight::from_parts(2_127_598, 0)
            // Standard Error: 77_315
            .saturating_add(Weight::from_parts(1_118_607, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_975_000 picoseconds.
        Weight::from_parts(4_975_000, 0)
            // Standard Error: 87_739
            .saturating_add(Weight::from_parts(1_460_094, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_943_000 picoseconds.
        Weight::from_parts(4_943_000, 0)
            // Standard Error: 66_641
            .saturating_add(Weight::from_parts(1_261_131, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_920_000 picoseconds.
        Weight::from_parts(4_980_902, 0)
            // Standard Error: 176_146
            .saturating_add(Weight::from_parts(1_604_121, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_998_000 picoseconds.
        Weight::from_parts(1_048_695, 0)
            // Standard Error: 124_055
            .saturating_add(Weight::from_parts(1_201_012, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_003_000 picoseconds.
        Weight::from_parts(5_003_000, 0)
            // Standard Error: 61_395
            .saturating_add(Weight::from_parts(1_030_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_086_000 picoseconds.
        Weight::from_parts(2_359_514, 0)
            // Standard Error: 88_069
            .saturating_add(Weight::from_parts(824_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_824_000 picoseconds.
        Weight::from_parts(4_824_000, 0)
            // Standard Error: 60_868
            .saturating_add(Weight::from_parts(1_253_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_917_000 picoseconds.
        Weight::from_parts(2_188_099, 0)
            // Standard Error: 67_994
            .saturating_add(Weight::from_parts(834_462, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_040_000 picoseconds.
        Weight::from_parts(5_040_000, 0)
            // Standard Error: 68_687
            .saturating_add(Weight::from_parts(1_636_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_015_000 picoseconds.
        Weight::from_parts(1_070_937, 0)
            // Standard Error: 126_779
            .saturating_add(Weight::from_parts(1_143_211, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_986_000 picoseconds.
        Weight::from_parts(1_017_171, 0)
            // Standard Error: 102_606
            .saturating_add(Weight::from_parts(2_256_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_887_000 picoseconds.
        Weight::from_parts(8_328_517, 0)
            // Standard Error: 132_856
            .saturating_add(Weight::from_parts(1_833_520, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_893_000 picoseconds.
        Weight::from_parts(2_394_024, 0)
            // Standard Error: 166_462
            .saturating_add(Weight::from_parts(2_484_519, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_957_000 picoseconds.
        Weight::from_parts(4_957_000, 0)
            // Standard Error: 77_312
            .saturating_add(Weight::from_parts(1_882_041, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_897_000 picoseconds.
        Weight::from_parts(4_897_000, 0)
            // Standard Error: 220_628
            .saturating_add(Weight::from_parts(8_483_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_991_000 picoseconds.
        Weight::from_parts(4_991_000, 0)
            // Standard Error: 105_292
            .saturating_add(Weight::from_parts(6_306_017, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_984_000 picoseconds.
        Weight::from_parts(5_501_442, 0)
            // Standard Error: 125_962
            .saturating_add(Weight::from_parts(2_272_177, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_903_000 picoseconds.
        Weight::from_parts(4_300_387, 0)
            // Standard Error: 143_917
            .saturating_add(Weight::from_parts(2_117_233, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_961_000 picoseconds.
        Weight::from_parts(4_961_000, 0)
            // Standard Error: 60_588
            .saturating_add(Weight::from_parts(1_187_055, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_101_000 picoseconds.
        Weight::from_parts(5_515_461, 0)
            // Standard Error: 69_865
            .saturating_add(Weight::from_parts(750_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_851_000 picoseconds.
        Weight::from_parts(2_428_919, 0)
            // Standard Error: 103_431
            .saturating_add(Weight::from_parts(1_138_461, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_042_000 picoseconds.
        Weight::from_parts(2_653_128, 0)
            // Standard Error: 92_948
            .saturating_add(Weight::from_parts(808_115, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_042_000 picoseconds.
        Weight::from_parts(2_812_805, 0)
            // Standard Error: 112_299
            .saturating_add(Weight::from_parts(1_343_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_021_000 picoseconds.
        Weight::from_parts(2_254_890, 0)
            // Standard Error: 59_218
            .saturating_add(Weight::from_parts(842_154, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_007_000 picoseconds.
        Weight::from_parts(1_621_742, 0)
            // Standard Error: 89_464
            .saturating_add(Weight::from_parts(1_373_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_168_000 picoseconds.
        Weight::from_parts(1_396_510, 0)
            // Standard Error: 67_584
            .saturating_add(Weight::from_parts(1_004_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_175_000 picoseconds.
        Weight::from_parts(3_275_983, 0)
            // Standard Error: 85_893
            .saturating_add(Weight::from_parts(1_340_897, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_990_000 picoseconds.
        Weight::from_parts(4_343_373, 0)
            // Standard Error: 55_721
            .saturating_add(Weight::from_parts(652_106, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_948_000 picoseconds.
        Weight::from_parts(4_948_000, 0)
            // Standard Error: 51_157
            .saturating_add(Weight::from_parts(1_215_919, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_081_000 picoseconds.
        Weight::from_parts(1_266_162, 0)
            // Standard Error: 63_862
            .saturating_add(Weight::from_parts(802_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_165_000 picoseconds.
        Weight::from_parts(1_145_541, 0)
            // Standard Error: 104_401
            .saturating_add(Weight::from_parts(1_299_641, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_937_000 picoseconds.
        Weight::from_parts(3_275_383, 0)
            // Standard Error: 102_972
            .saturating_add(Weight::from_parts(905_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_885_000 picoseconds.
        Weight::from_parts(2_662_775, 0)
            // Standard Error: 70_659
            .saturating_add(Weight::from_parts(1_256_616, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_275_000 picoseconds.
        Weight::from_parts(2_157_380, 0)
            // Standard Error: 42_840
            .saturating_add(Weight::from_parts(988_156, 0).saturating_mul(r.into()))
    }
}
