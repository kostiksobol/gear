// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-15, STEPS: `10`, REPEAT: `3`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear benchmark pallet --chain=gear-dev --steps=10 --repeat=3 --pallet=pallet-gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=a --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_message_with_voucher(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn send_reply_with_voucher(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_019_000 picoseconds.
        Weight::from_parts(2_019_000, 0)
            // Standard Error: 20_255
            .saturating_add(Weight::from_parts(340_499, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3504 + c * (1024 ±0)`
        // Minimum execution time: 4_591_000 picoseconds.
        Weight::from_parts(4_591_000, 3504)
            // Standard Error: 4_570
            .saturating_add(Weight::from_parts(691_351, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_733_000 picoseconds.
        Weight::from_parts(114_381_360, 0)
            // Standard Error: 148_691
            .saturating_add(Weight::from_parts(2_785_515, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 137_322_000 picoseconds.
        Weight::from_parts(139_684_000, 42236)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 82_980_000 picoseconds.
        Weight::from_parts(83_318_000, 21261)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 45_262_000 picoseconds.
        Weight::from_parts(46_801_000, 17070)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7639`
        // Minimum execution time: 13_117_000 picoseconds.
        Weight::from_parts(10_096_904, 7639)
            // Standard Error: 161_460
            .saturating_add(Weight::from_parts(17_970_362, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1301 + c * (16389 ±0)`
        //  Estimated: `40878 + c * (131112 ±0)`
        // Minimum execution time: 106_129_000 picoseconds.
        Weight::from_parts(106_129_000, 40878)
            // Standard Error: 1_020_637
            .saturating_add(Weight::from_parts(60_247_061, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 100_114_000 picoseconds.
        Weight::from_parts(100_114_000, 4990)
            // Standard Error: 688_193
            .saturating_add(Weight::from_parts(66_256_167, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `680`
        //  Estimated: `38737`
        // Minimum execution time: 108_542_000 picoseconds.
        Weight::from_parts(115_469_708, 38737)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(2_627, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 10_995_852_000 picoseconds.
        Weight::from_parts(10_995_852_000, 34312)
            // Standard Error: 2_308_462
            .saturating_add(Weight::from_parts(38_381_467, 0).saturating_mul(c.into()))
            // Standard Error: 137
            .saturating_add(Weight::from_parts(921, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 95_751_000 picoseconds.
        Weight::from_parts(47_769_282, 23853)
            // Standard Error: 47
            .saturating_add(Weight::from_parts(1_320, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 100_500_000 picoseconds.
        Weight::from_parts(88_627_823, 27177)
            // Standard Error: 42
            .saturating_add(Weight::from_parts(1_271, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 136_890_000 picoseconds.
        Weight::from_parts(92_462_521, 42227)
            // Standard Error: 49
            .saturating_add(Weight::from_parts(1_345, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 152_753_000 picoseconds.
        Weight::from_parts(123_128_361, 45757)
            // Standard Error: 47
            .saturating_add(Weight::from_parts(1_305, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74787`
        // Minimum execution time: 480_434_000 picoseconds.
        Weight::from_parts(501_645_713, 74787)
            // Standard Error: 27_195
            .saturating_add(Weight::from_parts(35_481, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74211`
        // Minimum execution time: 497_848_000 picoseconds.
        Weight::from_parts(530_607_539, 74211)
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `221 + c * (1075 ±0)`
        //  Estimated: `3951 + c * (2150 ±0)`
        // Minimum execution time: 68_449_000 picoseconds.
        Weight::from_parts(68_449_000, 3951)
            // Standard Error: 333_510
            .saturating_add(Weight::from_parts(62_223_864, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 127_204_000 picoseconds.
        Weight::from_parts(127_204_000, 0)
            // Standard Error: 15_579_009
            .saturating_add(Weight::from_parts(743_137_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 572_091_000 picoseconds.
        Weight::from_parts(543_574_290, 0)
            // Standard Error: 79_504
            .saturating_add(Weight::from_parts(29_053_723, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 337_979_000 picoseconds.
        Weight::from_parts(354_307_096, 0)
            // Standard Error: 1_191_369
            .saturating_add(Weight::from_parts(203_182_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 126_743_000 picoseconds.
        Weight::from_parts(142_540_187, 0)
            // Standard Error: 66_559
            .saturating_add(Weight::from_parts(5_549_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 201_136_000 picoseconds.
        Weight::from_parts(228_332_801, 0)
            // Standard Error: 84_563
            .saturating_add(Weight::from_parts(6_352_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_776_000 picoseconds.
        Weight::from_parts(187_711_766, 0)
            // Standard Error: 1_794_535
            .saturating_add(Weight::from_parts(317_702_197, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 125_100_000 picoseconds.
        Weight::from_parts(151_061_519, 0)
            // Standard Error: 1_030_521
            .saturating_add(Weight::from_parts(315_539_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 125_842_000 picoseconds.
        Weight::from_parts(143_005_212, 0)
            // Standard Error: 1_750_708
            .saturating_add(Weight::from_parts(316_186_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 129_992_000 picoseconds.
        Weight::from_parts(141_515_664, 0)
            // Standard Error: 1_369_063
            .saturating_add(Weight::from_parts(316_133_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_125_000 picoseconds.
        Weight::from_parts(149_844_370, 0)
            // Standard Error: 1_032_716
            .saturating_add(Weight::from_parts(312_535_301, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_290_000 picoseconds.
        Weight::from_parts(142_042_948, 0)
            // Standard Error: 1_006_397
            .saturating_add(Weight::from_parts(318_410_262, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_722_000 picoseconds.
        Weight::from_parts(143_829_720, 0)
            // Standard Error: 1_208_683
            .saturating_add(Weight::from_parts(314_824_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 125_936_000 picoseconds.
        Weight::from_parts(131_412_630, 0)
            // Standard Error: 982_072
            .saturating_add(Weight::from_parts(317_148_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 765_291_000 picoseconds.
        Weight::from_parts(1_217_557_471, 0)
            // Standard Error: 15_692_940
            .saturating_add(Weight::from_parts(458_237_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_131_791_000 picoseconds.
        Weight::from_parts(219_955_938, 0)
            // Standard Error: 271_833
            .saturating_add(Weight::from_parts(13_551_961, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 128_009_000 picoseconds.
        Weight::from_parts(133_037_779, 0)
            // Standard Error: 1_060_070
            .saturating_add(Weight::from_parts(320_271_818, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 130_592_000 picoseconds.
        Weight::from_parts(134_318_874, 0)
            // Standard Error: 1_107_270
            .saturating_add(Weight::from_parts(320_131_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 129_429_000 picoseconds.
        Weight::from_parts(169_412_822, 0)
            // Standard Error: 1_535_022
            .saturating_add(Weight::from_parts(407_311_723, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 136_622_000 picoseconds.
        Weight::from_parts(136_622_000, 0)
            // Standard Error: 19_315_121
            .saturating_add(Weight::from_parts(1_557_843_012, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_274_000 picoseconds.
        Weight::from_parts(211_296_234, 0)
            // Standard Error: 4_082_499
            .saturating_add(Weight::from_parts(619_610_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 735_013_000 picoseconds.
        Weight::from_parts(735_013_000, 0)
            // Standard Error: 2_066_576
            .saturating_add(Weight::from_parts(29_356_774, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 130_928_000 picoseconds.
        Weight::from_parts(183_172_624, 0)
            // Standard Error: 3_638_017
            .saturating_add(Weight::from_parts(635_221_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 757_783_000 picoseconds.
        Weight::from_parts(757_783_000, 0)
            // Standard Error: 2_075_825
            .saturating_add(Weight::from_parts(29_489_598, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 774_119_000 picoseconds.
        Weight::from_parts(1_159_644_192, 0)
            // Standard Error: 19_024_605
            .saturating_add(Weight::from_parts(654_714_559, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 756_444_000 picoseconds.
        Weight::from_parts(1_161_717_372, 0)
            // Standard Error: 19_299_845
            .saturating_add(Weight::from_parts(660_054_929, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_133_000 picoseconds.
        Weight::from_parts(142_240_261, 0)
            // Standard Error: 1_559_825
            .saturating_add(Weight::from_parts(326_278_375, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_547_973_000 picoseconds.
        Weight::from_parts(6_574_340_216, 0)
            // Standard Error: 2_625_421
            .saturating_add(Weight::from_parts(512_996_807, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 816_981_000 picoseconds.
        Weight::from_parts(816_981_000, 0)
            // Standard Error: 2_122_980
            .saturating_add(Weight::from_parts(39_115_531, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_652_584_000 picoseconds.
        Weight::from_parts(6_684_757_525, 0)
            // Standard Error: 3_179_032
            .saturating_add(Weight::from_parts(551_927_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_707_339_000 picoseconds.
        Weight::from_parts(6_611_117_081, 0)
            // Standard Error: 3_709_964
            .saturating_add(Weight::from_parts(577_120_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 293_105_000 picoseconds.
        Weight::from_parts(321_338_881, 0)
            // Standard Error: 3_131_939
            .saturating_add(Weight::from_parts(645_907_161, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 953_785_000 picoseconds.
        Weight::from_parts(953_785_000, 0)
            // Standard Error: 2_086_431
            .saturating_add(Weight::from_parts(29_517_039, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_734_170_000 picoseconds.
        Weight::from_parts(6_779_879_407, 0)
            // Standard Error: 3_563_433
            .saturating_add(Weight::from_parts(576_579_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 127_273_000 picoseconds.
        Weight::from_parts(130_637_933, 0)
            // Standard Error: 2_500_765
            .saturating_add(Weight::from_parts(40_970_733, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 154_246_000 picoseconds.
        Weight::from_parts(146_839_388, 0)
            // Standard Error: 37_913
            .saturating_add(Weight::from_parts(501_964, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 128_564_000 picoseconds.
        Weight::from_parts(131_477_000, 0)
            // Standard Error: 4_479_083
            .saturating_add(Weight::from_parts(39_827_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 159_291_000 picoseconds.
        Weight::from_parts(160_611_786, 0)
            // Standard Error: 37_463
            .saturating_add(Weight::from_parts(491_630, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 126_612_000 picoseconds.
        Weight::from_parts(129_886_066, 0)
            // Standard Error: 8_440_682
            .saturating_add(Weight::from_parts(59_357_933, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 126_213_000 picoseconds.
        Weight::from_parts(129_657_400, 0)
            // Standard Error: 2_557_531
            .saturating_add(Weight::from_parts(32_080_933, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 128_996_000 picoseconds.
        Weight::from_parts(201_962_849, 0)
            // Standard Error: 1_618_897
            .saturating_add(Weight::from_parts(469_236_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 149_290_000 picoseconds.
        Weight::from_parts(149_290_000, 0)
            // Standard Error: 45_431
            .saturating_add(Weight::from_parts(834_966, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 756_188_000 picoseconds.
        Weight::from_parts(972_020_066, 0)
            // Standard Error: 263_464_485
            .saturating_add(Weight::from_parts(155_565_266, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 744_869_000 picoseconds.
        Weight::from_parts(961_025_800, 0)
            // Standard Error: 252_025_500
            .saturating_add(Weight::from_parts(168_846_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 138_354_000 picoseconds.
        Weight::from_parts(141_350_000, 0)
            // Standard Error: 1_022_135
            .saturating_add(Weight::from_parts(15_708_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 152_275_000 picoseconds.
        Weight::from_parts(142_115_243, 0)
            // Standard Error: 35_475
            .saturating_add(Weight::from_parts(502_279, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 135_020_000 picoseconds.
        Weight::from_parts(138_931_466, 0)
            // Standard Error: 680_936
            .saturating_add(Weight::from_parts(18_239_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 151_687_000 picoseconds.
        Weight::from_parts(153_201_782, 0)
            // Standard Error: 38_942
            .saturating_add(Weight::from_parts(497_453, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 129_123_000 picoseconds.
        Weight::from_parts(157_378_148, 0)
            // Standard Error: 1_377_913
            .saturating_add(Weight::from_parts(314_841_189, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_806_000 picoseconds.
        Weight::from_parts(134_358_745, 0)
            // Standard Error: 1_407_919
            .saturating_add(Weight::from_parts(315_376_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 766_233_000 picoseconds.
        Weight::from_parts(1_130_225_501, 0)
            // Standard Error: 15_209_480
            .saturating_add(Weight::from_parts(335_792_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 781_687_000 picoseconds.
        Weight::from_parts(1_114_091_484, 0)
            // Standard Error: 168_447
            .saturating_add(Weight::from_parts(262_037, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_223_300_000 picoseconds.
        Weight::from_parts(7_629_002_460, 0)
            // Standard Error: 15_744_925
            .saturating_add(Weight::from_parts(368_201_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_674_168_000 picoseconds.
        Weight::from_parts(8_090_042_259, 0)
            // Standard Error: 4_151_449
            .saturating_add(Weight::from_parts(21_845_121, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_449_000 picoseconds.
        Weight::from_parts(163_289_824, 0)
            // Standard Error: 1_605_923
            .saturating_add(Weight::from_parts(340_206_153, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 321_706_000 picoseconds.
        Weight::from_parts(321_706_000, 0)
            // Standard Error: 258_664
            .saturating_add(Weight::from_parts(26_522_023, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 127_271_000 picoseconds.
        Weight::from_parts(135_392_097, 0)
            // Standard Error: 1_221_336
            .saturating_add(Weight::from_parts(317_549_451, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 122_429_000 picoseconds.
        Weight::from_parts(125_997_533, 0)
            // Standard Error: 3_492_841
            .saturating_add(Weight::from_parts(43_532_133, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 126_629_000 picoseconds.
        Weight::from_parts(131_549_333, 0)
            // Standard Error: 1_284_236
            .saturating_add(Weight::from_parts(17_591_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 123_098_000 picoseconds.
        Weight::from_parts(126_408_466, 0)
            // Standard Error: 1_164_358
            .saturating_add(Weight::from_parts(21_178_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 128_711_000 picoseconds.
        Weight::from_parts(132_687_000, 0)
            // Standard Error: 1_237_184
            .saturating_add(Weight::from_parts(9_823_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 125_622_000 picoseconds.
        Weight::from_parts(129_998_200, 0)
            // Standard Error: 1_201_602
            .saturating_add(Weight::from_parts(19_464_133, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 211_869_000 picoseconds.
        Weight::from_parts(246_192_361, 0)
            // Standard Error: 2_627_627
            .saturating_add(Weight::from_parts(503_024_753, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 140_785_000 picoseconds.
        Weight::from_parts(140_308_911, 0)
            // Standard Error: 3_335_744
            .saturating_add(Weight::from_parts(737_140_727, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 47_270_157_000 picoseconds.
        Weight::from_parts(2_431_239_805, 0)
            // Standard Error: 4_516_613
            .saturating_add(Weight::from_parts(29_469_927, 0).saturating_mul(p.into()))
            // Standard Error: 4_518_525
            .saturating_add(Weight::from_parts(191_826_343, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_200_000 picoseconds.
        Weight::from_parts(182_800_122, 0)
            // Standard Error: 3_917_214
            .saturating_add(Weight::from_parts(734_252_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 47_216_876_000 picoseconds.
        Weight::from_parts(364_712_960, 0)
            // Standard Error: 4_446_558
            .saturating_add(Weight::from_parts(29_663_245, 0).saturating_mul(p.into()))
            // Standard Error: 4_448_440
            .saturating_add(Weight::from_parts(192_263_017, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 125_549_000 picoseconds.
        Weight::from_parts(147_286_886, 0)
            // Standard Error: 412_621
            .saturating_add(Weight::from_parts(6_552_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 123_516_000 picoseconds.
        Weight::from_parts(177_701_849, 1131)
            // Standard Error: 38_039
            .saturating_add(Weight::from_parts(12_278_565, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 124_490_000 picoseconds.
        Weight::from_parts(124_490_000, 1131)
            // Standard Error: 1_628_168
            .saturating_add(Weight::from_parts(45_645_855, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_421_710_000 picoseconds.
        Weight::from_parts(6_491_899_319, 5069931)
            // Standard Error: 3_201_391
            .saturating_add(Weight::from_parts(43_993_113, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1463 + p * (65580 ±0)`
        //  Estimated: `2109 + p * (75482 ±0)`
        // Minimum execution time: 125_940_000 picoseconds.
        Weight::from_parts(125_940_000, 2109)
            // Standard Error: 185_250
            .saturating_add(Weight::from_parts(49_183_839, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 133_419_000 picoseconds.
        Weight::from_parts(147_587_522, 1131)
            // Standard Error: 2_500_923
            .saturating_add(Weight::from_parts(41_762_133, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1961 + p * (9863 ±11)`
        // Minimum execution time: 814_195_000 picoseconds.
        Weight::from_parts(1_208_117_219, 1961)
            // Standard Error: 13_261_371
            .saturating_add(Weight::from_parts(56_833_834, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9863).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_210_041_000 picoseconds.
        Weight::from_parts(1_561_430_763, 317931)
            // Standard Error: 12_195_455
            .saturating_add(Weight::from_parts(53_357_070, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_458_000 picoseconds.
        Weight::from_parts(3_858_360, 0)
            // Standard Error: 245_837
            .saturating_add(Weight::from_parts(32_878_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_356_210_000 picoseconds.
        Weight::from_parts(4_101_916_311, 0)
            // Standard Error: 336_006
            .saturating_add(Weight::from_parts(5_366_592, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_351_401_000 picoseconds.
        Weight::from_parts(3_927_797_600, 0)
            // Standard Error: 703_927
            .saturating_add(Weight::from_parts(6_534_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_614_374_000 picoseconds.
        Weight::from_parts(12_121_665_288, 0)
            // Standard Error: 974_692
            .saturating_add(Weight::from_parts(10_049_092, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_817_667_000 picoseconds.
        Weight::from_parts(11_563_647_200, 0)
            // Standard Error: 736_260
            .saturating_add(Weight::from_parts(8_889_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_973_000 picoseconds.
        Weight::from_parts(6_947_602, 0)
            // Standard Error: 88_895
            .saturating_add(Weight::from_parts(3_749_640, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_243_000 picoseconds.
        Weight::from_parts(6_964_502, 0)
            // Standard Error: 68_911
            .saturating_add(Weight::from_parts(3_185_681, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_338_000 picoseconds.
        Weight::from_parts(6_965_346, 0)
            // Standard Error: 12_015
            .saturating_add(Weight::from_parts(1_593_073, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_149_000 picoseconds.
        Weight::from_parts(4_575_382, 0)
            // Standard Error: 86_389
            .saturating_add(Weight::from_parts(2_927_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_529_000 picoseconds.
        Weight::from_parts(5_529_000, 0)
            // Standard Error: 96_568
            .saturating_add(Weight::from_parts(4_989_109, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_318_000 picoseconds.
        Weight::from_parts(11_909_392, 0)
            // Standard Error: 1_811
            .saturating_add(Weight::from_parts(77_424, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_231_000 picoseconds.
        Weight::from_parts(7_179_174, 0)
            // Standard Error: 35_746
            .saturating_add(Weight::from_parts(2_648_444, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_648_444 -
            2_537_401, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_095_000 picoseconds.
        Weight::from_parts(5_514_329, 0)
            // Standard Error: 36_972
            .saturating_add(Weight::from_parts(2_537_401, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_623_000 picoseconds.
        Weight::from_parts(25_947_518, 0)
            // Standard Error: 317_624
            .saturating_add(Weight::from_parts(9_282_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 15_401_000 picoseconds.
        Weight::from_parts(10_663_883, 0)
            // Standard Error: 92_549
            .saturating_add(Weight::from_parts(851_529, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_509_000 picoseconds.
        Weight::from_parts(9_449_025, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_071_000 picoseconds.
        Weight::from_parts(5_565_361, 0)
            // Standard Error: 24_430
            .saturating_add(Weight::from_parts(263_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_327_000 picoseconds.
        Weight::from_parts(3_739_754, 0)
            // Standard Error: 80_043
            .saturating_add(Weight::from_parts(748_443, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_290_000 picoseconds.
        Weight::from_parts(383_873, 0)
            // Standard Error: 74_654
            .saturating_add(Weight::from_parts(1_063_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_692_000 picoseconds.
        Weight::from_parts(13_270_513, 0)
            // Standard Error: 59_049
            .saturating_add(Weight::from_parts(373_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_777_000 picoseconds.
        Weight::from_parts(4_988_552, 0)
            // Standard Error: 116_713
            .saturating_add(Weight::from_parts(1_469_161, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_381_000 picoseconds.
        Weight::from_parts(6_626_662, 0)
            // Standard Error: 102_802
            .saturating_add(Weight::from_parts(8_597_492, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_029_000 picoseconds.
        Weight::from_parts(1_727_809, 0)
            // Standard Error: 93_318
            .saturating_add(Weight::from_parts(3_506_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_085_000 picoseconds.
        Weight::from_parts(1_837_110, 0)
            // Standard Error: 150_983
            .saturating_add(Weight::from_parts(3_218_213, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_211_000 picoseconds.
        Weight::from_parts(3_425_415, 0)
            // Standard Error: 169_464
            .saturating_add(Weight::from_parts(3_011_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_923_000 picoseconds.
        Weight::from_parts(6_203_740, 0)
            // Standard Error: 111_531
            .saturating_add(Weight::from_parts(2_576_845, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_276_000 picoseconds.
        Weight::from_parts(3_493_311, 0)
            // Standard Error: 47_756
            .saturating_add(Weight::from_parts(728_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_118_000 picoseconds.
        Weight::from_parts(3_874_459, 0)
            // Standard Error: 35_234
            .saturating_add(Weight::from_parts(460_520, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_890_000 picoseconds.
        Weight::from_parts(4_890_000, 0)
            // Standard Error: 116_704
            .saturating_add(Weight::from_parts(1_656_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_979_000 picoseconds.
        Weight::from_parts(4_778_691, 0)
            // Standard Error: 82_843
            .saturating_add(Weight::from_parts(909_092, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_807_000 picoseconds.
        Weight::from_parts(4_233_295, 0)
            // Standard Error: 24_862
            .saturating_add(Weight::from_parts(374_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_936_000 picoseconds.
        Weight::from_parts(3_808_026, 0)
            // Standard Error: 39_440
            .saturating_add(Weight::from_parts(482_702, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_964_000 picoseconds.
        Weight::from_parts(2_421_549, 0)
            // Standard Error: 42_714
            .saturating_add(Weight::from_parts(606_634, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_032_000 picoseconds.
        Weight::from_parts(3_090_008, 0)
            // Standard Error: 46_767
            .saturating_add(Weight::from_parts(570_570, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_073_000 picoseconds.
        Weight::from_parts(3_552_643, 0)
            // Standard Error: 47_591
            .saturating_add(Weight::from_parts(519_888, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_995_000 picoseconds.
        Weight::from_parts(3_854_789, 0)
            // Standard Error: 31_309
            .saturating_add(Weight::from_parts(394_379, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_062_000 picoseconds.
        Weight::from_parts(5_468_109, 0)
            // Standard Error: 19_275
            .saturating_add(Weight::from_parts(211_393, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_116_000 picoseconds.
        Weight::from_parts(5_267_322, 0)
            // Standard Error: 17_073
            .saturating_add(Weight::from_parts(256_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_177_000 picoseconds.
        Weight::from_parts(5_177_000, 0)
            // Standard Error: 95_106
            .saturating_add(Weight::from_parts(1_752_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_244_000 picoseconds.
        Weight::from_parts(1_368_741, 0)
            // Standard Error: 115_264
            .saturating_add(Weight::from_parts(1_227_060, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_163_000 picoseconds.
        Weight::from_parts(5_163_000, 0)
            // Standard Error: 95_959
            .saturating_add(Weight::from_parts(1_787_156, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_195_000 picoseconds.
        Weight::from_parts(5_195_000, 0)
            // Standard Error: 62_255
            .saturating_add(Weight::from_parts(1_173_623, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_122_000 picoseconds.
        Weight::from_parts(5_122_000, 0)
            // Standard Error: 95_908
            .saturating_add(Weight::from_parts(1_683_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_070_000 picoseconds.
        Weight::from_parts(5_070_000, 0)
            // Standard Error: 63_366
            .saturating_add(Weight::from_parts(1_119_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_122_000 picoseconds.
        Weight::from_parts(5_122_000, 0)
            // Standard Error: 75_635
            .saturating_add(Weight::from_parts(1_398_043, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_375_000 picoseconds.
        Weight::from_parts(5_375_000, 0)
            // Standard Error: 66_666
            .saturating_add(Weight::from_parts(1_188_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_169_000 picoseconds.
        Weight::from_parts(5_169_000, 0)
            // Standard Error: 102_288
            .saturating_add(Weight::from_parts(1_843_005, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_238_000 picoseconds.
        Weight::from_parts(5_238_000, 0)
            // Standard Error: 61_967
            .saturating_add(Weight::from_parts(1_364_855, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_139_000 picoseconds.
        Weight::from_parts(5_139_000, 0)
            // Standard Error: 78_320
            .saturating_add(Weight::from_parts(1_861_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_964_000 picoseconds.
        Weight::from_parts(790_106, 0)
            // Standard Error: 117_551
            .saturating_add(Weight::from_parts(1_413_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_260_000 picoseconds.
        Weight::from_parts(3_536_516, 0)
            // Standard Error: 105_198
            .saturating_add(Weight::from_parts(2_027_050, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_103_000 picoseconds.
        Weight::from_parts(80_560, 0)
            // Standard Error: 98_845
            .saturating_add(Weight::from_parts(1_617_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_140_000 picoseconds.
        Weight::from_parts(2_322_316, 0)
            // Standard Error: 135_451
            .saturating_add(Weight::from_parts(1_923_951, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_114_000 picoseconds.
        Weight::from_parts(5_114_000, 0)
            // Standard Error: 71_403
            .saturating_add(Weight::from_parts(1_361_705, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_269_000 picoseconds.
        Weight::from_parts(1_115_097, 0)
            // Standard Error: 153_246
            .saturating_add(Weight::from_parts(2_112_355, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_177_000 picoseconds.
        Weight::from_parts(1_866_842, 0)
            // Standard Error: 120_522
            .saturating_add(Weight::from_parts(1_391_513, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_111_000 picoseconds.
        Weight::from_parts(5_111_000, 0)
            // Standard Error: 73_727
            .saturating_add(Weight::from_parts(1_943_075, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_056_000 picoseconds.
        Weight::from_parts(5_056_000, 0)
            // Standard Error: 48_094
            .saturating_add(Weight::from_parts(1_348_947, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_117_000 picoseconds.
        Weight::from_parts(1_075_611, 0)
            // Standard Error: 91_970
            .saturating_add(Weight::from_parts(1_502_976, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_084_000 picoseconds.
        Weight::from_parts(4_421_661, 0)
            // Standard Error: 46_117
            .saturating_add(Weight::from_parts(804_660, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_091_000 picoseconds.
        Weight::from_parts(2_850_338, 0)
            // Standard Error: 112_310
            .saturating_add(Weight::from_parts(1_376_735, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_077_000 picoseconds.
        Weight::from_parts(3_853_795, 0)
            // Standard Error: 47_597
            .saturating_add(Weight::from_parts(667_127, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_114_000 picoseconds.
        Weight::from_parts(5_114_000, 0)
            // Standard Error: 119_885
            .saturating_add(Weight::from_parts(1_634_982, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_246_000 picoseconds.
        Weight::from_parts(305_926, 0)
            // Standard Error: 109_023
            .saturating_add(Weight::from_parts(1_378_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_083_000 picoseconds.
        Weight::from_parts(8_780_915, 0)
            // Standard Error: 143_706
            .saturating_add(Weight::from_parts(2_050_018, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_859_000 picoseconds.
        Weight::from_parts(7_159_158, 0)
            // Standard Error: 115_116
            .saturating_add(Weight::from_parts(1_900_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_164_000 picoseconds.
        Weight::from_parts(4_890_326, 0)
            // Standard Error: 211_958
            .saturating_add(Weight::from_parts(2_452_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_316_000 picoseconds.
        Weight::from_parts(8_075_930, 0)
            // Standard Error: 129_635
            .saturating_add(Weight::from_parts(1_892_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_227_000 picoseconds.
        Weight::from_parts(5_227_000, 0)
            // Standard Error: 223_702
            .saturating_add(Weight::from_parts(8_470_284, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_032_000 picoseconds.
        Weight::from_parts(172_956, 0)
            // Standard Error: 228_549
            .saturating_add(Weight::from_parts(6_583_787, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_227_000 picoseconds.
        Weight::from_parts(12_959_785, 0)
            // Standard Error: 186_592
            .saturating_add(Weight::from_parts(2_205_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_046_000 picoseconds.
        Weight::from_parts(6_243_424, 0)
            // Standard Error: 177_356
            .saturating_add(Weight::from_parts(2_006_108, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_201_000 picoseconds.
        Weight::from_parts(53_199, 0)
            // Standard Error: 97_628
            .saturating_add(Weight::from_parts(1_350_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_054_000 picoseconds.
        Weight::from_parts(4_175_324, 0)
            // Standard Error: 78_013
            .saturating_add(Weight::from_parts(832_870, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_990_000 picoseconds.
        Weight::from_parts(1_488_742, 0)
            // Standard Error: 121_890
            .saturating_add(Weight::from_parts(1_370_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_010_000 picoseconds.
        Weight::from_parts(1_445_519, 0)
            // Standard Error: 48_092
            .saturating_add(Weight::from_parts(830_743, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_979_000 picoseconds.
        Weight::from_parts(720_884, 0)
            // Standard Error: 118_077
            .saturating_add(Weight::from_parts(1_266_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_052_000 picoseconds.
        Weight::from_parts(2_619_754, 0)
            // Standard Error: 70_643
            .saturating_add(Weight::from_parts(701_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_202_000 picoseconds.
        Weight::from_parts(5_202_000, 0)
            // Standard Error: 58_698
            .saturating_add(Weight::from_parts(1_023_801, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_000_000 picoseconds.
        Weight::from_parts(1_006_031, 0)
            // Standard Error: 52_575
            .saturating_add(Weight::from_parts(807_272, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_196_000 picoseconds.
        Weight::from_parts(1_357_353, 0)
            // Standard Error: 92_629
            .saturating_add(Weight::from_parts(1_364_061, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_010_000 picoseconds.
        Weight::from_parts(3_526_277, 0)
            // Standard Error: 54_896
            .saturating_add(Weight::from_parts(671_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_952_000 picoseconds.
        Weight::from_parts(4_952_000, 0)
            // Standard Error: 57_366
            .saturating_add(Weight::from_parts(1_175_458, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_003_000 picoseconds.
        Weight::from_parts(3_285_515, 0)
            // Standard Error: 40_071
            .saturating_add(Weight::from_parts(868_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_877_000 picoseconds.
        Weight::from_parts(4_877_000, 0)
            // Standard Error: 51_282
            .saturating_add(Weight::from_parts(1_192_417, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_036_000 picoseconds.
        Weight::from_parts(3_015_458, 0)
            // Standard Error: 66_221
            .saturating_add(Weight::from_parts(816_127, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_033_000 picoseconds.
        Weight::from_parts(2_457_347, 0)
            // Standard Error: 87_524
            .saturating_add(Weight::from_parts(1_358_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_218_000 picoseconds.
        Weight::from_parts(4_318_356, 0)
            // Standard Error: 46_642
            .saturating_add(Weight::from_parts(902_046, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_019_000 picoseconds.
        Weight::from_parts(2_019_000, 0)
            // Standard Error: 20_255
            .saturating_add(Weight::from_parts(340_499, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3504 + c * (1024 ±0)`
        // Minimum execution time: 4_591_000 picoseconds.
        Weight::from_parts(4_591_000, 3504)
            // Standard Error: 4_570
            .saturating_add(Weight::from_parts(691_351, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_733_000 picoseconds.
        Weight::from_parts(114_381_360, 0)
            // Standard Error: 148_691
            .saturating_add(Weight::from_parts(2_785_515, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 137_322_000 picoseconds.
        Weight::from_parts(139_684_000, 42236)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 82_980_000 picoseconds.
        Weight::from_parts(83_318_000, 21261)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 45_262_000 picoseconds.
        Weight::from_parts(46_801_000, 17070)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7639`
        // Minimum execution time: 13_117_000 picoseconds.
        Weight::from_parts(10_096_904, 7639)
            // Standard Error: 161_460
            .saturating_add(Weight::from_parts(17_970_362, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1301 + c * (16389 ±0)`
        //  Estimated: `40878 + c * (131112 ±0)`
        // Minimum execution time: 106_129_000 picoseconds.
        Weight::from_parts(106_129_000, 40878)
            // Standard Error: 1_020_637
            .saturating_add(Weight::from_parts(60_247_061, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 100_114_000 picoseconds.
        Weight::from_parts(100_114_000, 4990)
            // Standard Error: 688_193
            .saturating_add(Weight::from_parts(66_256_167, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `680`
        //  Estimated: `38737`
        // Minimum execution time: 108_542_000 picoseconds.
        Weight::from_parts(115_469_708, 38737)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(2_627, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 10_995_852_000 picoseconds.
        Weight::from_parts(10_995_852_000, 34312)
            // Standard Error: 2_308_462
            .saturating_add(Weight::from_parts(38_381_467, 0).saturating_mul(c.into()))
            // Standard Error: 137
            .saturating_add(Weight::from_parts(921, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 95_751_000 picoseconds.
        Weight::from_parts(47_769_282, 23853)
            // Standard Error: 47
            .saturating_add(Weight::from_parts(1_320, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 100_500_000 picoseconds.
        Weight::from_parts(88_627_823, 27177)
            // Standard Error: 42
            .saturating_add(Weight::from_parts(1_271, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 136_890_000 picoseconds.
        Weight::from_parts(92_462_521, 42227)
            // Standard Error: 49
            .saturating_add(Weight::from_parts(1_345, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 152_753_000 picoseconds.
        Weight::from_parts(123_128_361, 45757)
            // Standard Error: 47
            .saturating_add(Weight::from_parts(1_305, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74787`
        // Minimum execution time: 480_434_000 picoseconds.
        Weight::from_parts(501_645_713, 74787)
            // Standard Error: 27_195
            .saturating_add(Weight::from_parts(35_481, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74211`
        // Minimum execution time: 497_848_000 picoseconds.
        Weight::from_parts(530_607_539, 74211)
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `221 + c * (1075 ±0)`
        //  Estimated: `3951 + c * (2150 ±0)`
        // Minimum execution time: 68_449_000 picoseconds.
        Weight::from_parts(68_449_000, 3951)
            // Standard Error: 333_510
            .saturating_add(Weight::from_parts(62_223_864, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 127_204_000 picoseconds.
        Weight::from_parts(127_204_000, 0)
            // Standard Error: 15_579_009
            .saturating_add(Weight::from_parts(743_137_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 572_091_000 picoseconds.
        Weight::from_parts(543_574_290, 0)
            // Standard Error: 79_504
            .saturating_add(Weight::from_parts(29_053_723, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 337_979_000 picoseconds.
        Weight::from_parts(354_307_096, 0)
            // Standard Error: 1_191_369
            .saturating_add(Weight::from_parts(203_182_871, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 126_743_000 picoseconds.
        Weight::from_parts(142_540_187, 0)
            // Standard Error: 66_559
            .saturating_add(Weight::from_parts(5_549_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 201_136_000 picoseconds.
        Weight::from_parts(228_332_801, 0)
            // Standard Error: 84_563
            .saturating_add(Weight::from_parts(6_352_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_776_000 picoseconds.
        Weight::from_parts(187_711_766, 0)
            // Standard Error: 1_794_535
            .saturating_add(Weight::from_parts(317_702_197, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 125_100_000 picoseconds.
        Weight::from_parts(151_061_519, 0)
            // Standard Error: 1_030_521
            .saturating_add(Weight::from_parts(315_539_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 125_842_000 picoseconds.
        Weight::from_parts(143_005_212, 0)
            // Standard Error: 1_750_708
            .saturating_add(Weight::from_parts(316_186_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 129_992_000 picoseconds.
        Weight::from_parts(141_515_664, 0)
            // Standard Error: 1_369_063
            .saturating_add(Weight::from_parts(316_133_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_125_000 picoseconds.
        Weight::from_parts(149_844_370, 0)
            // Standard Error: 1_032_716
            .saturating_add(Weight::from_parts(312_535_301, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_290_000 picoseconds.
        Weight::from_parts(142_042_948, 0)
            // Standard Error: 1_006_397
            .saturating_add(Weight::from_parts(318_410_262, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_722_000 picoseconds.
        Weight::from_parts(143_829_720, 0)
            // Standard Error: 1_208_683
            .saturating_add(Weight::from_parts(314_824_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 125_936_000 picoseconds.
        Weight::from_parts(131_412_630, 0)
            // Standard Error: 982_072
            .saturating_add(Weight::from_parts(317_148_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 765_291_000 picoseconds.
        Weight::from_parts(1_217_557_471, 0)
            // Standard Error: 15_692_940
            .saturating_add(Weight::from_parts(458_237_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_131_791_000 picoseconds.
        Weight::from_parts(219_955_938, 0)
            // Standard Error: 271_833
            .saturating_add(Weight::from_parts(13_551_961, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 128_009_000 picoseconds.
        Weight::from_parts(133_037_779, 0)
            // Standard Error: 1_060_070
            .saturating_add(Weight::from_parts(320_271_818, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 130_592_000 picoseconds.
        Weight::from_parts(134_318_874, 0)
            // Standard Error: 1_107_270
            .saturating_add(Weight::from_parts(320_131_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 129_429_000 picoseconds.
        Weight::from_parts(169_412_822, 0)
            // Standard Error: 1_535_022
            .saturating_add(Weight::from_parts(407_311_723, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 136_622_000 picoseconds.
        Weight::from_parts(136_622_000, 0)
            // Standard Error: 19_315_121
            .saturating_add(Weight::from_parts(1_557_843_012, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_274_000 picoseconds.
        Weight::from_parts(211_296_234, 0)
            // Standard Error: 4_082_499
            .saturating_add(Weight::from_parts(619_610_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 735_013_000 picoseconds.
        Weight::from_parts(735_013_000, 0)
            // Standard Error: 2_066_576
            .saturating_add(Weight::from_parts(29_356_774, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 130_928_000 picoseconds.
        Weight::from_parts(183_172_624, 0)
            // Standard Error: 3_638_017
            .saturating_add(Weight::from_parts(635_221_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 757_783_000 picoseconds.
        Weight::from_parts(757_783_000, 0)
            // Standard Error: 2_075_825
            .saturating_add(Weight::from_parts(29_489_598, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 774_119_000 picoseconds.
        Weight::from_parts(1_159_644_192, 0)
            // Standard Error: 19_024_605
            .saturating_add(Weight::from_parts(654_714_559, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 756_444_000 picoseconds.
        Weight::from_parts(1_161_717_372, 0)
            // Standard Error: 19_299_845
            .saturating_add(Weight::from_parts(660_054_929, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 132_133_000 picoseconds.
        Weight::from_parts(142_240_261, 0)
            // Standard Error: 1_559_825
            .saturating_add(Weight::from_parts(326_278_375, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_547_973_000 picoseconds.
        Weight::from_parts(6_574_340_216, 0)
            // Standard Error: 2_625_421
            .saturating_add(Weight::from_parts(512_996_807, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 816_981_000 picoseconds.
        Weight::from_parts(816_981_000, 0)
            // Standard Error: 2_122_980
            .saturating_add(Weight::from_parts(39_115_531, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_652_584_000 picoseconds.
        Weight::from_parts(6_684_757_525, 0)
            // Standard Error: 3_179_032
            .saturating_add(Weight::from_parts(551_927_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_707_339_000 picoseconds.
        Weight::from_parts(6_611_117_081, 0)
            // Standard Error: 3_709_964
            .saturating_add(Weight::from_parts(577_120_654, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 293_105_000 picoseconds.
        Weight::from_parts(321_338_881, 0)
            // Standard Error: 3_131_939
            .saturating_add(Weight::from_parts(645_907_161, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 953_785_000 picoseconds.
        Weight::from_parts(953_785_000, 0)
            // Standard Error: 2_086_431
            .saturating_add(Weight::from_parts(29_517_039, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_734_170_000 picoseconds.
        Weight::from_parts(6_779_879_407, 0)
            // Standard Error: 3_563_433
            .saturating_add(Weight::from_parts(576_579_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 127_273_000 picoseconds.
        Weight::from_parts(130_637_933, 0)
            // Standard Error: 2_500_765
            .saturating_add(Weight::from_parts(40_970_733, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 154_246_000 picoseconds.
        Weight::from_parts(146_839_388, 0)
            // Standard Error: 37_913
            .saturating_add(Weight::from_parts(501_964, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 128_564_000 picoseconds.
        Weight::from_parts(131_477_000, 0)
            // Standard Error: 4_479_083
            .saturating_add(Weight::from_parts(39_827_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 159_291_000 picoseconds.
        Weight::from_parts(160_611_786, 0)
            // Standard Error: 37_463
            .saturating_add(Weight::from_parts(491_630, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 126_612_000 picoseconds.
        Weight::from_parts(129_886_066, 0)
            // Standard Error: 8_440_682
            .saturating_add(Weight::from_parts(59_357_933, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 126_213_000 picoseconds.
        Weight::from_parts(129_657_400, 0)
            // Standard Error: 2_557_531
            .saturating_add(Weight::from_parts(32_080_933, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 128_996_000 picoseconds.
        Weight::from_parts(201_962_849, 0)
            // Standard Error: 1_618_897
            .saturating_add(Weight::from_parts(469_236_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 149_290_000 picoseconds.
        Weight::from_parts(149_290_000, 0)
            // Standard Error: 45_431
            .saturating_add(Weight::from_parts(834_966, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 756_188_000 picoseconds.
        Weight::from_parts(972_020_066, 0)
            // Standard Error: 263_464_485
            .saturating_add(Weight::from_parts(155_565_266, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 744_869_000 picoseconds.
        Weight::from_parts(961_025_800, 0)
            // Standard Error: 252_025_500
            .saturating_add(Weight::from_parts(168_846_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 138_354_000 picoseconds.
        Weight::from_parts(141_350_000, 0)
            // Standard Error: 1_022_135
            .saturating_add(Weight::from_parts(15_708_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 152_275_000 picoseconds.
        Weight::from_parts(142_115_243, 0)
            // Standard Error: 35_475
            .saturating_add(Weight::from_parts(502_279, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 135_020_000 picoseconds.
        Weight::from_parts(138_931_466, 0)
            // Standard Error: 680_936
            .saturating_add(Weight::from_parts(18_239_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 151_687_000 picoseconds.
        Weight::from_parts(153_201_782, 0)
            // Standard Error: 38_942
            .saturating_add(Weight::from_parts(497_453, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 129_123_000 picoseconds.
        Weight::from_parts(157_378_148, 0)
            // Standard Error: 1_377_913
            .saturating_add(Weight::from_parts(314_841_189, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_806_000 picoseconds.
        Weight::from_parts(134_358_745, 0)
            // Standard Error: 1_407_919
            .saturating_add(Weight::from_parts(315_376_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 766_233_000 picoseconds.
        Weight::from_parts(1_130_225_501, 0)
            // Standard Error: 15_209_480
            .saturating_add(Weight::from_parts(335_792_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 781_687_000 picoseconds.
        Weight::from_parts(1_114_091_484, 0)
            // Standard Error: 168_447
            .saturating_add(Weight::from_parts(262_037, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_223_300_000 picoseconds.
        Weight::from_parts(7_629_002_460, 0)
            // Standard Error: 15_744_925
            .saturating_add(Weight::from_parts(368_201_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_674_168_000 picoseconds.
        Weight::from_parts(8_090_042_259, 0)
            // Standard Error: 4_151_449
            .saturating_add(Weight::from_parts(21_845_121, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_449_000 picoseconds.
        Weight::from_parts(163_289_824, 0)
            // Standard Error: 1_605_923
            .saturating_add(Weight::from_parts(340_206_153, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 321_706_000 picoseconds.
        Weight::from_parts(321_706_000, 0)
            // Standard Error: 258_664
            .saturating_add(Weight::from_parts(26_522_023, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 127_271_000 picoseconds.
        Weight::from_parts(135_392_097, 0)
            // Standard Error: 1_221_336
            .saturating_add(Weight::from_parts(317_549_451, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 122_429_000 picoseconds.
        Weight::from_parts(125_997_533, 0)
            // Standard Error: 3_492_841
            .saturating_add(Weight::from_parts(43_532_133, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 126_629_000 picoseconds.
        Weight::from_parts(131_549_333, 0)
            // Standard Error: 1_284_236
            .saturating_add(Weight::from_parts(17_591_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 123_098_000 picoseconds.
        Weight::from_parts(126_408_466, 0)
            // Standard Error: 1_164_358
            .saturating_add(Weight::from_parts(21_178_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 128_711_000 picoseconds.
        Weight::from_parts(132_687_000, 0)
            // Standard Error: 1_237_184
            .saturating_add(Weight::from_parts(9_823_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 125_622_000 picoseconds.
        Weight::from_parts(129_998_200, 0)
            // Standard Error: 1_201_602
            .saturating_add(Weight::from_parts(19_464_133, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 211_869_000 picoseconds.
        Weight::from_parts(246_192_361, 0)
            // Standard Error: 2_627_627
            .saturating_add(Weight::from_parts(503_024_753, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 140_785_000 picoseconds.
        Weight::from_parts(140_308_911, 0)
            // Standard Error: 3_335_744
            .saturating_add(Weight::from_parts(737_140_727, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 47_270_157_000 picoseconds.
        Weight::from_parts(2_431_239_805, 0)
            // Standard Error: 4_516_613
            .saturating_add(Weight::from_parts(29_469_927, 0).saturating_mul(p.into()))
            // Standard Error: 4_518_525
            .saturating_add(Weight::from_parts(191_826_343, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 148_200_000 picoseconds.
        Weight::from_parts(182_800_122, 0)
            // Standard Error: 3_917_214
            .saturating_add(Weight::from_parts(734_252_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 47_216_876_000 picoseconds.
        Weight::from_parts(364_712_960, 0)
            // Standard Error: 4_446_558
            .saturating_add(Weight::from_parts(29_663_245, 0).saturating_mul(p.into()))
            // Standard Error: 4_448_440
            .saturating_add(Weight::from_parts(192_263_017, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 125_549_000 picoseconds.
        Weight::from_parts(147_286_886, 0)
            // Standard Error: 412_621
            .saturating_add(Weight::from_parts(6_552_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 123_516_000 picoseconds.
        Weight::from_parts(177_701_849, 1131)
            // Standard Error: 38_039
            .saturating_add(Weight::from_parts(12_278_565, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 124_490_000 picoseconds.
        Weight::from_parts(124_490_000, 1131)
            // Standard Error: 1_628_168
            .saturating_add(Weight::from_parts(45_645_855, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_421_710_000 picoseconds.
        Weight::from_parts(6_491_899_319, 5069931)
            // Standard Error: 3_201_391
            .saturating_add(Weight::from_parts(43_993_113, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1463 + p * (65580 ±0)`
        //  Estimated: `2109 + p * (75482 ±0)`
        // Minimum execution time: 125_940_000 picoseconds.
        Weight::from_parts(125_940_000, 2109)
            // Standard Error: 185_250
            .saturating_add(Weight::from_parts(49_183_839, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 133_419_000 picoseconds.
        Weight::from_parts(147_587_522, 1131)
            // Standard Error: 2_500_923
            .saturating_add(Weight::from_parts(41_762_133, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1961 + p * (9863 ±11)`
        // Minimum execution time: 814_195_000 picoseconds.
        Weight::from_parts(1_208_117_219, 1961)
            // Standard Error: 13_261_371
            .saturating_add(Weight::from_parts(56_833_834, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9863).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_210_041_000 picoseconds.
        Weight::from_parts(1_561_430_763, 317931)
            // Standard Error: 12_195_455
            .saturating_add(Weight::from_parts(53_357_070, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_458_000 picoseconds.
        Weight::from_parts(3_858_360, 0)
            // Standard Error: 245_837
            .saturating_add(Weight::from_parts(32_878_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_356_210_000 picoseconds.
        Weight::from_parts(4_101_916_311, 0)
            // Standard Error: 336_006
            .saturating_add(Weight::from_parts(5_366_592, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_351_401_000 picoseconds.
        Weight::from_parts(3_927_797_600, 0)
            // Standard Error: 703_927
            .saturating_add(Weight::from_parts(6_534_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_614_374_000 picoseconds.
        Weight::from_parts(12_121_665_288, 0)
            // Standard Error: 974_692
            .saturating_add(Weight::from_parts(10_049_092, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_817_667_000 picoseconds.
        Weight::from_parts(11_563_647_200, 0)
            // Standard Error: 736_260
            .saturating_add(Weight::from_parts(8_889_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_973_000 picoseconds.
        Weight::from_parts(6_947_602, 0)
            // Standard Error: 88_895
            .saturating_add(Weight::from_parts(3_749_640, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_243_000 picoseconds.
        Weight::from_parts(6_964_502, 0)
            // Standard Error: 68_911
            .saturating_add(Weight::from_parts(3_185_681, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_338_000 picoseconds.
        Weight::from_parts(6_965_346, 0)
            // Standard Error: 12_015
            .saturating_add(Weight::from_parts(1_593_073, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_149_000 picoseconds.
        Weight::from_parts(4_575_382, 0)
            // Standard Error: 86_389
            .saturating_add(Weight::from_parts(2_927_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_529_000 picoseconds.
        Weight::from_parts(5_529_000, 0)
            // Standard Error: 96_568
            .saturating_add(Weight::from_parts(4_989_109, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_318_000 picoseconds.
        Weight::from_parts(11_909_392, 0)
            // Standard Error: 1_811
            .saturating_add(Weight::from_parts(77_424, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_231_000 picoseconds.
        Weight::from_parts(7_179_174, 0)
            // Standard Error: 35_746
            .saturating_add(Weight::from_parts(2_648_444, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_648_444 -
            2_537_401, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_095_000 picoseconds.
        Weight::from_parts(5_514_329, 0)
            // Standard Error: 36_972
            .saturating_add(Weight::from_parts(2_537_401, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_623_000 picoseconds.
        Weight::from_parts(25_947_518, 0)
            // Standard Error: 317_624
            .saturating_add(Weight::from_parts(9_282_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 15_401_000 picoseconds.
        Weight::from_parts(10_663_883, 0)
            // Standard Error: 92_549
            .saturating_add(Weight::from_parts(851_529, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_509_000 picoseconds.
        Weight::from_parts(9_449_025, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_071_000 picoseconds.
        Weight::from_parts(5_565_361, 0)
            // Standard Error: 24_430
            .saturating_add(Weight::from_parts(263_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_327_000 picoseconds.
        Weight::from_parts(3_739_754, 0)
            // Standard Error: 80_043
            .saturating_add(Weight::from_parts(748_443, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_290_000 picoseconds.
        Weight::from_parts(383_873, 0)
            // Standard Error: 74_654
            .saturating_add(Weight::from_parts(1_063_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_692_000 picoseconds.
        Weight::from_parts(13_270_513, 0)
            // Standard Error: 59_049
            .saturating_add(Weight::from_parts(373_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_777_000 picoseconds.
        Weight::from_parts(4_988_552, 0)
            // Standard Error: 116_713
            .saturating_add(Weight::from_parts(1_469_161, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_381_000 picoseconds.
        Weight::from_parts(6_626_662, 0)
            // Standard Error: 102_802
            .saturating_add(Weight::from_parts(8_597_492, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_029_000 picoseconds.
        Weight::from_parts(1_727_809, 0)
            // Standard Error: 93_318
            .saturating_add(Weight::from_parts(3_506_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_085_000 picoseconds.
        Weight::from_parts(1_837_110, 0)
            // Standard Error: 150_983
            .saturating_add(Weight::from_parts(3_218_213, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_211_000 picoseconds.
        Weight::from_parts(3_425_415, 0)
            // Standard Error: 169_464
            .saturating_add(Weight::from_parts(3_011_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_923_000 picoseconds.
        Weight::from_parts(6_203_740, 0)
            // Standard Error: 111_531
            .saturating_add(Weight::from_parts(2_576_845, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_276_000 picoseconds.
        Weight::from_parts(3_493_311, 0)
            // Standard Error: 47_756
            .saturating_add(Weight::from_parts(728_781, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_118_000 picoseconds.
        Weight::from_parts(3_874_459, 0)
            // Standard Error: 35_234
            .saturating_add(Weight::from_parts(460_520, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_890_000 picoseconds.
        Weight::from_parts(4_890_000, 0)
            // Standard Error: 116_704
            .saturating_add(Weight::from_parts(1_656_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_979_000 picoseconds.
        Weight::from_parts(4_778_691, 0)
            // Standard Error: 82_843
            .saturating_add(Weight::from_parts(909_092, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_807_000 picoseconds.
        Weight::from_parts(4_233_295, 0)
            // Standard Error: 24_862
            .saturating_add(Weight::from_parts(374_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_936_000 picoseconds.
        Weight::from_parts(3_808_026, 0)
            // Standard Error: 39_440
            .saturating_add(Weight::from_parts(482_702, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_964_000 picoseconds.
        Weight::from_parts(2_421_549, 0)
            // Standard Error: 42_714
            .saturating_add(Weight::from_parts(606_634, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_032_000 picoseconds.
        Weight::from_parts(3_090_008, 0)
            // Standard Error: 46_767
            .saturating_add(Weight::from_parts(570_570, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_073_000 picoseconds.
        Weight::from_parts(3_552_643, 0)
            // Standard Error: 47_591
            .saturating_add(Weight::from_parts(519_888, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_995_000 picoseconds.
        Weight::from_parts(3_854_789, 0)
            // Standard Error: 31_309
            .saturating_add(Weight::from_parts(394_379, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_062_000 picoseconds.
        Weight::from_parts(5_468_109, 0)
            // Standard Error: 19_275
            .saturating_add(Weight::from_parts(211_393, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_116_000 picoseconds.
        Weight::from_parts(5_267_322, 0)
            // Standard Error: 17_073
            .saturating_add(Weight::from_parts(256_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_177_000 picoseconds.
        Weight::from_parts(5_177_000, 0)
            // Standard Error: 95_106
            .saturating_add(Weight::from_parts(1_752_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_244_000 picoseconds.
        Weight::from_parts(1_368_741, 0)
            // Standard Error: 115_264
            .saturating_add(Weight::from_parts(1_227_060, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_163_000 picoseconds.
        Weight::from_parts(5_163_000, 0)
            // Standard Error: 95_959
            .saturating_add(Weight::from_parts(1_787_156, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_195_000 picoseconds.
        Weight::from_parts(5_195_000, 0)
            // Standard Error: 62_255
            .saturating_add(Weight::from_parts(1_173_623, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_122_000 picoseconds.
        Weight::from_parts(5_122_000, 0)
            // Standard Error: 95_908
            .saturating_add(Weight::from_parts(1_683_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_070_000 picoseconds.
        Weight::from_parts(5_070_000, 0)
            // Standard Error: 63_366
            .saturating_add(Weight::from_parts(1_119_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_122_000 picoseconds.
        Weight::from_parts(5_122_000, 0)
            // Standard Error: 75_635
            .saturating_add(Weight::from_parts(1_398_043, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_375_000 picoseconds.
        Weight::from_parts(5_375_000, 0)
            // Standard Error: 66_666
            .saturating_add(Weight::from_parts(1_188_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_169_000 picoseconds.
        Weight::from_parts(5_169_000, 0)
            // Standard Error: 102_288
            .saturating_add(Weight::from_parts(1_843_005, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_238_000 picoseconds.
        Weight::from_parts(5_238_000, 0)
            // Standard Error: 61_967
            .saturating_add(Weight::from_parts(1_364_855, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_139_000 picoseconds.
        Weight::from_parts(5_139_000, 0)
            // Standard Error: 78_320
            .saturating_add(Weight::from_parts(1_861_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_964_000 picoseconds.
        Weight::from_parts(790_106, 0)
            // Standard Error: 117_551
            .saturating_add(Weight::from_parts(1_413_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_260_000 picoseconds.
        Weight::from_parts(3_536_516, 0)
            // Standard Error: 105_198
            .saturating_add(Weight::from_parts(2_027_050, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_103_000 picoseconds.
        Weight::from_parts(80_560, 0)
            // Standard Error: 98_845
            .saturating_add(Weight::from_parts(1_617_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_140_000 picoseconds.
        Weight::from_parts(2_322_316, 0)
            // Standard Error: 135_451
            .saturating_add(Weight::from_parts(1_923_951, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_114_000 picoseconds.
        Weight::from_parts(5_114_000, 0)
            // Standard Error: 71_403
            .saturating_add(Weight::from_parts(1_361_705, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_269_000 picoseconds.
        Weight::from_parts(1_115_097, 0)
            // Standard Error: 153_246
            .saturating_add(Weight::from_parts(2_112_355, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_177_000 picoseconds.
        Weight::from_parts(1_866_842, 0)
            // Standard Error: 120_522
            .saturating_add(Weight::from_parts(1_391_513, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_111_000 picoseconds.
        Weight::from_parts(5_111_000, 0)
            // Standard Error: 73_727
            .saturating_add(Weight::from_parts(1_943_075, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_056_000 picoseconds.
        Weight::from_parts(5_056_000, 0)
            // Standard Error: 48_094
            .saturating_add(Weight::from_parts(1_348_947, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_117_000 picoseconds.
        Weight::from_parts(1_075_611, 0)
            // Standard Error: 91_970
            .saturating_add(Weight::from_parts(1_502_976, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_084_000 picoseconds.
        Weight::from_parts(4_421_661, 0)
            // Standard Error: 46_117
            .saturating_add(Weight::from_parts(804_660, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_091_000 picoseconds.
        Weight::from_parts(2_850_338, 0)
            // Standard Error: 112_310
            .saturating_add(Weight::from_parts(1_376_735, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_077_000 picoseconds.
        Weight::from_parts(3_853_795, 0)
            // Standard Error: 47_597
            .saturating_add(Weight::from_parts(667_127, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_114_000 picoseconds.
        Weight::from_parts(5_114_000, 0)
            // Standard Error: 119_885
            .saturating_add(Weight::from_parts(1_634_982, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_246_000 picoseconds.
        Weight::from_parts(305_926, 0)
            // Standard Error: 109_023
            .saturating_add(Weight::from_parts(1_378_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_083_000 picoseconds.
        Weight::from_parts(8_780_915, 0)
            // Standard Error: 143_706
            .saturating_add(Weight::from_parts(2_050_018, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_859_000 picoseconds.
        Weight::from_parts(7_159_158, 0)
            // Standard Error: 115_116
            .saturating_add(Weight::from_parts(1_900_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_164_000 picoseconds.
        Weight::from_parts(4_890_326, 0)
            // Standard Error: 211_958
            .saturating_add(Weight::from_parts(2_452_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_316_000 picoseconds.
        Weight::from_parts(8_075_930, 0)
            // Standard Error: 129_635
            .saturating_add(Weight::from_parts(1_892_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_227_000 picoseconds.
        Weight::from_parts(5_227_000, 0)
            // Standard Error: 223_702
            .saturating_add(Weight::from_parts(8_470_284, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_032_000 picoseconds.
        Weight::from_parts(172_956, 0)
            // Standard Error: 228_549
            .saturating_add(Weight::from_parts(6_583_787, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_227_000 picoseconds.
        Weight::from_parts(12_959_785, 0)
            // Standard Error: 186_592
            .saturating_add(Weight::from_parts(2_205_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_046_000 picoseconds.
        Weight::from_parts(6_243_424, 0)
            // Standard Error: 177_356
            .saturating_add(Weight::from_parts(2_006_108, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_201_000 picoseconds.
        Weight::from_parts(53_199, 0)
            // Standard Error: 97_628
            .saturating_add(Weight::from_parts(1_350_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_054_000 picoseconds.
        Weight::from_parts(4_175_324, 0)
            // Standard Error: 78_013
            .saturating_add(Weight::from_parts(832_870, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_990_000 picoseconds.
        Weight::from_parts(1_488_742, 0)
            // Standard Error: 121_890
            .saturating_add(Weight::from_parts(1_370_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_010_000 picoseconds.
        Weight::from_parts(1_445_519, 0)
            // Standard Error: 48_092
            .saturating_add(Weight::from_parts(830_743, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_979_000 picoseconds.
        Weight::from_parts(720_884, 0)
            // Standard Error: 118_077
            .saturating_add(Weight::from_parts(1_266_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_052_000 picoseconds.
        Weight::from_parts(2_619_754, 0)
            // Standard Error: 70_643
            .saturating_add(Weight::from_parts(701_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_202_000 picoseconds.
        Weight::from_parts(5_202_000, 0)
            // Standard Error: 58_698
            .saturating_add(Weight::from_parts(1_023_801, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_000_000 picoseconds.
        Weight::from_parts(1_006_031, 0)
            // Standard Error: 52_575
            .saturating_add(Weight::from_parts(807_272, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_196_000 picoseconds.
        Weight::from_parts(1_357_353, 0)
            // Standard Error: 92_629
            .saturating_add(Weight::from_parts(1_364_061, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_010_000 picoseconds.
        Weight::from_parts(3_526_277, 0)
            // Standard Error: 54_896
            .saturating_add(Weight::from_parts(671_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_952_000 picoseconds.
        Weight::from_parts(4_952_000, 0)
            // Standard Error: 57_366
            .saturating_add(Weight::from_parts(1_175_458, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_003_000 picoseconds.
        Weight::from_parts(3_285_515, 0)
            // Standard Error: 40_071
            .saturating_add(Weight::from_parts(868_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_877_000 picoseconds.
        Weight::from_parts(4_877_000, 0)
            // Standard Error: 51_282
            .saturating_add(Weight::from_parts(1_192_417, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_036_000 picoseconds.
        Weight::from_parts(3_015_458, 0)
            // Standard Error: 66_221
            .saturating_add(Weight::from_parts(816_127, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_033_000 picoseconds.
        Weight::from_parts(2_457_347, 0)
            // Standard Error: 87_524
            .saturating_add(Weight::from_parts(1_358_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_218_000 picoseconds.
        Weight::from_parts(4_318_356, 0)
            // Standard Error: 46_642
            .saturating_add(Weight::from_parts(902_046, 0).saturating_mul(r.into()))
    }
}
