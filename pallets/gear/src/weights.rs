// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-15, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet-gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=abc --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_message_with_voucher(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn send_reply_with_voucher(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 957_000 picoseconds.
        Weight::from_parts(1_046_000, 0)
            // Standard Error: 871
            .saturating_add(Weight::from_parts(254_104, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_865_000 picoseconds.
        Weight::from_parts(2_920_000, 3506)
            // Standard Error: 1_198
            .saturating_add(Weight::from_parts(689_208, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_548_000 picoseconds.
        Weight::from_parts(72_876_300, 0)
            // Standard Error: 6_632
            .saturating_add(Weight::from_parts(2_568_078, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 83_376_000 picoseconds.
        Weight::from_parts(85_522_000, 42236)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 54_684_000 picoseconds.
        Weight::from_parts(55_796_000, 21261)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 29_465_000 picoseconds.
        Weight::from_parts(30_170_000, 17070)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_112_000 picoseconds.
        Weight::from_parts(9_163_606, 7640)
            // Standard Error: 44_872
            .saturating_add(Weight::from_parts(16_405_437, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1306 + c * (16389 ±0)`
        //  Estimated: `40970 + c * (131112 ±0)`
        // Minimum execution time: 69_069_000 picoseconds.
        Weight::from_parts(70_420_000, 40970)
            // Standard Error: 153_624
            .saturating_add(Weight::from_parts(54_843_600, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 61_541_000 picoseconds.
        Weight::from_parts(40_428_583, 4990)
            // Standard Error: 46_451
            .saturating_add(Weight::from_parts(52_902_652, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `680`
        //  Estimated: `38737`
        // Minimum execution time: 65_324_000 picoseconds.
        Weight::from_parts(93_910_906, 38737)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_578, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 10_907_804_000 picoseconds.
        Weight::from_parts(189_835_969, 34312)
            // Standard Error: 169_375
            .saturating_add(Weight::from_parts(53_417_811, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_534, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 56_668_000 picoseconds.
        Weight::from_parts(43_656_049, 23853)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_176, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 58_900_000 picoseconds.
        Weight::from_parts(35_766_861, 27177)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_170, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 84_263_000 picoseconds.
        Weight::from_parts(66_382_733, 42227)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_191, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 94_575_000 picoseconds.
        Weight::from_parts(69_466_104, 45757)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_200, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 300_061_000 picoseconds.
        Weight::from_parts(315_415_779, 74319)
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 312_340_000 picoseconds.
        Weight::from_parts(327_672_905, 74319)
            // Standard Error: 1_264
            .saturating_add(Weight::from_parts(1_644, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 44_783_000 picoseconds.
        Weight::from_parts(45_832_000, 3899)
            // Standard Error: 34_819
            .saturating_add(Weight::from_parts(52_513_759, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_222_000 picoseconds.
        Weight::from_parts(83_705_000, 0)
            // Standard Error: 3_878_365
            .saturating_add(Weight::from_parts(613_553_553, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 367_316_000 picoseconds.
        Weight::from_parts(314_232_247, 0)
            // Standard Error: 8_362
            .saturating_add(Weight::from_parts(30_560_173, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 204_250_000 picoseconds.
        Weight::from_parts(238_265_949, 0)
            // Standard Error: 444_593
            .saturating_add(Weight::from_parts(121_406_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_420_000 picoseconds.
        Weight::from_parts(89_622_505, 0)
            // Standard Error: 5_057
            .saturating_add(Weight::from_parts(3_691_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_920_000 picoseconds.
        Weight::from_parts(141_710_953, 0)
            // Standard Error: 27_372
            .saturating_add(Weight::from_parts(4_186_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_069_000 picoseconds.
        Weight::from_parts(121_425_023, 0)
            // Standard Error: 484_931
            .saturating_add(Weight::from_parts(187_901_550, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_658_000 picoseconds.
        Weight::from_parts(81_380_601, 0)
            // Standard Error: 300_290
            .saturating_add(Weight::from_parts(183_685_712, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_794_000 picoseconds.
        Weight::from_parts(74_786_748, 0)
            // Standard Error: 353_347
            .saturating_add(Weight::from_parts(184_391_351, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_129_000 picoseconds.
        Weight::from_parts(74_437_127, 0)
            // Standard Error: 359_813
            .saturating_add(Weight::from_parts(186_105_830, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_526_000 picoseconds.
        Weight::from_parts(75_041_524, 0)
            // Standard Error: 298_913
            .saturating_add(Weight::from_parts(183_808_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_437_000 picoseconds.
        Weight::from_parts(73_753_815, 0)
            // Standard Error: 360_183
            .saturating_add(Weight::from_parts(183_811_848, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_233_000 picoseconds.
        Weight::from_parts(76_162_241, 0)
            // Standard Error: 348_871
            .saturating_add(Weight::from_parts(184_095_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_700_000 picoseconds.
        Weight::from_parts(75_632_622, 0)
            // Standard Error: 318_966
            .saturating_add(Weight::from_parts(184_173_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_697_000 picoseconds.
        Weight::from_parts(765_298_829, 0)
            // Standard Error: 494_226
            .saturating_add(Weight::from_parts(264_655_642, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 927_039_000 picoseconds.
        Weight::from_parts(930_360_000, 0)
            // Standard Error: 52_991
            .saturating_add(Weight::from_parts(13_308_287, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_428_000 picoseconds.
        Weight::from_parts(73_766_091, 0)
            // Standard Error: 342_766
            .saturating_add(Weight::from_parts(183_958_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_488_000 picoseconds.
        Weight::from_parts(75_808_814, 0)
            // Standard Error: 326_950
            .saturating_add(Weight::from_parts(187_356_240, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_740_000 picoseconds.
        Weight::from_parts(93_129_839, 0)
            // Standard Error: 422_472
            .saturating_add(Weight::from_parts(251_911_109, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_784_000 picoseconds.
        Weight::from_parts(85_989_000, 0)
            // Standard Error: 3_619_556
            .saturating_add(Weight::from_parts(1_034_331_139, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_690_000 picoseconds.
        Weight::from_parts(141_428_129, 0)
            // Standard Error: 497_112
            .saturating_add(Weight::from_parts(394_061_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 474_294_000 picoseconds.
        Weight::from_parts(476_290_000, 0)
            // Standard Error: 70_833
            .saturating_add(Weight::from_parts(21_577_622, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_530_000 picoseconds.
        Weight::from_parts(163_823_708, 0)
            // Standard Error: 532_143
            .saturating_add(Weight::from_parts(393_980_153, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 471_446_000 picoseconds.
        Weight::from_parts(473_566_000, 0)
            // Standard Error: 63_916
            .saturating_add(Weight::from_parts(21_426_433, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 707_850_000 picoseconds.
        Weight::from_parts(781_439_535, 0)
            // Standard Error: 580_841
            .saturating_add(Weight::from_parts(408_849_070, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 714_749_000 picoseconds.
        Weight::from_parts(833_362_176, 0)
            // Standard Error: 727_192
            .saturating_add(Weight::from_parts(422_362_848, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_948_000 picoseconds.
        Weight::from_parts(72_481_247, 0)
            // Standard Error: 357_664
            .saturating_add(Weight::from_parts(194_133_679, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_776_895_000 picoseconds.
        Weight::from_parts(3_959_516_619, 0)
            // Standard Error: 403_838
            .saturating_add(Weight::from_parts(282_548_725, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 486_113_000 picoseconds.
        Weight::from_parts(494_453_000, 0)
            // Standard Error: 47_562
            .saturating_add(Weight::from_parts(31_232_976, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_813_583_000 picoseconds.
        Weight::from_parts(3_968_942_472, 0)
            // Standard Error: 395_905
            .saturating_add(Weight::from_parts(342_421_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_768_761_000 picoseconds.
        Weight::from_parts(3_941_302_857, 0)
            // Standard Error: 451_554
            .saturating_add(Weight::from_parts(359_219_450, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 251_617_000 picoseconds.
        Weight::from_parts(297_322_594, 0)
            // Standard Error: 534_487
            .saturating_add(Weight::from_parts(411_509_170, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 642_741_000 picoseconds.
        Weight::from_parts(650_606_000, 0)
            // Standard Error: 55_190
            .saturating_add(Weight::from_parts(21_081_547, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_958_067_000 picoseconds.
        Weight::from_parts(4_093_086_625, 0)
            // Standard Error: 457_773
            .saturating_add(Weight::from_parts(362_786_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_510_000 picoseconds.
        Weight::from_parts(89_135_500, 0)
            // Standard Error: 242_199
            .saturating_add(Weight::from_parts(20_780_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_970_000 picoseconds.
        Weight::from_parts(89_679_568, 0)
            // Standard Error: 1_102
            .saturating_add(Weight::from_parts(429_566, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_823_000 picoseconds.
        Weight::from_parts(87_589_871, 0)
            // Standard Error: 270_505
            .saturating_add(Weight::from_parts(21_353_128, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_441_000 picoseconds.
        Weight::from_parts(93_897_949, 0)
            // Standard Error: 990
            .saturating_add(Weight::from_parts(424_915, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_977_000 picoseconds.
        Weight::from_parts(86_834_483, 0)
            // Standard Error: 275_061
            .saturating_add(Weight::from_parts(20_736_916, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_549_000 picoseconds.
        Weight::from_parts(87_749_228, 0)
            // Standard Error: 246_428
            .saturating_add(Weight::from_parts(17_695_571, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_574_000 picoseconds.
        Weight::from_parts(120_867_459, 0)
            // Standard Error: 436_075
            .saturating_add(Weight::from_parts(273_713_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_790_000 picoseconds.
        Weight::from_parts(101_156_000, 0)
            // Standard Error: 2_484
            .saturating_add(Weight::from_parts(651_035, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 703_527_000 picoseconds.
        Weight::from_parts(724_118_824, 0)
            // Standard Error: 2_090_589
            .saturating_add(Weight::from_parts(27_198_675, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 704_795_000 picoseconds.
        Weight::from_parts(732_991_420, 0)
            // Standard Error: 3_283_941
            .saturating_add(Weight::from_parts(108_796_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_234_000 picoseconds.
        Weight::from_parts(95_973_540, 0)
            // Standard Error: 352_529
            .saturating_add(Weight::from_parts(10_936_659, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_068_000 picoseconds.
        Weight::from_parts(94_055_117, 0)
            // Standard Error: 999
            .saturating_add(Weight::from_parts(427_403, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_604_000 picoseconds.
        Weight::from_parts(99_289_573, 0)
            // Standard Error: 294_194
            .saturating_add(Weight::from_parts(5_954_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_908_000 picoseconds.
        Weight::from_parts(85_902_344, 0)
            // Standard Error: 1_167
            .saturating_add(Weight::from_parts(432_350, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_410_000 picoseconds.
        Weight::from_parts(82_274_343, 0)
            // Standard Error: 320_670
            .saturating_add(Weight::from_parts(185_629_984, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_665_000 picoseconds.
        Weight::from_parts(78_994_781, 0)
            // Standard Error: 304_403
            .saturating_add(Weight::from_parts(185_751_973, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 707_679_000 picoseconds.
        Weight::from_parts(755_415_979, 0)
            // Standard Error: 507_246
            .saturating_add(Weight::from_parts(198_320_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 728_156_000 picoseconds.
        Weight::from_parts(747_790_615, 0)
            // Standard Error: 997
            .saturating_add(Weight::from_parts(151_362, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_465_124_000 picoseconds.
        Weight::from_parts(4_637_938_228, 0)
            // Standard Error: 511_174
            .saturating_add(Weight::from_parts(214_412_236, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_675_387_000 picoseconds.
        Weight::from_parts(4_783_450_358, 0)
            // Standard Error: 10_864
            .saturating_add(Weight::from_parts(13_653_066, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_954_000 picoseconds.
        Weight::from_parts(105_635_743, 0)
            // Standard Error: 434_137
            .saturating_add(Weight::from_parts(202_396_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 190_090_000 picoseconds.
        Weight::from_parts(191_881_000, 0)
            // Standard Error: 58_941
            .saturating_add(Weight::from_parts(26_076_036, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_927_000 picoseconds.
        Weight::from_parts(76_748_301, 0)
            // Standard Error: 333_497
            .saturating_add(Weight::from_parts(186_061_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_806_000 picoseconds.
        Weight::from_parts(88_897_602, 0)
            // Standard Error: 264_801
            .saturating_add(Weight::from_parts(24_184_297, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_799_000 picoseconds.
        Weight::from_parts(88_124_979, 0)
            // Standard Error: 281_493
            .saturating_add(Weight::from_parts(14_965_820, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_209_000 picoseconds.
        Weight::from_parts(85_595_138, 0)
            // Standard Error: 282_650
            .saturating_add(Weight::from_parts(16_828_061, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_703_000 picoseconds.
        Weight::from_parts(86_177_753, 0)
            // Standard Error: 294_582
            .saturating_add(Weight::from_parts(14_020_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_884_000 picoseconds.
        Weight::from_parts(85_472_404, 0)
            // Standard Error: 251_651
            .saturating_add(Weight::from_parts(13_299_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_237_000 picoseconds.
        Weight::from_parts(195_816_221, 0)
            // Standard Error: 401_265
            .saturating_add(Weight::from_parts(291_418_256, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_462_000 picoseconds.
        Weight::from_parts(150_822_344, 0)
            // Standard Error: 477_564
            .saturating_add(Weight::from_parts(479_519_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_173_703_000 picoseconds.
        Weight::from_parts(44_786_680_000, 0)
            // Standard Error: 262_762
            .saturating_add(Weight::from_parts(7_756_692, 0).saturating_mul(p.into()))
            // Standard Error: 262_749
            .saturating_add(Weight::from_parts(175_999_814, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_327_000 picoseconds.
        Weight::from_parts(155_021_732, 0)
            // Standard Error: 465_230
            .saturating_add(Weight::from_parts(481_044_822, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_301_306_000 picoseconds.
        Weight::from_parts(45_427_868_000, 0)
            // Standard Error: 275_806
            .saturating_add(Weight::from_parts(7_224_081, 0).saturating_mul(p.into()))
            // Standard Error: 275_792
            .saturating_add(Weight::from_parts(175_953_245, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_025_000 picoseconds.
        Weight::from_parts(99_446_773, 0)
            // Standard Error: 27_427
            .saturating_add(Weight::from_parts(3_526_941, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 81_787_000 picoseconds.
        Weight::from_parts(107_162_103, 1131)
            // Standard Error: 5_354
            .saturating_add(Weight::from_parts(11_793_974, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 82_988_000 picoseconds.
        Weight::from_parts(83_914_000, 1131)
            // Standard Error: 39_652
            .saturating_add(Weight::from_parts(35_409_412, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_092_465_000 picoseconds.
        Weight::from_parts(5_880_105_740, 5069931)
            // Standard Error: 68_365
            .saturating_add(Weight::from_parts(35_422_702, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 85_136_000 picoseconds.
        Weight::from_parts(87_447_000, 1939)
            // Standard Error: 51_719
            .saturating_add(Weight::from_parts(47_282_286, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 93_328_000 picoseconds.
        Weight::from_parts(88_394_648, 1131)
            // Standard Error: 68_535
            .saturating_add(Weight::from_parts(36_790_446, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 775_981_000 picoseconds.
        Weight::from_parts(818_435_618, 1496)
            // Standard Error: 224_188
            .saturating_add(Weight::from_parts(41_275_447, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_124_726_000 picoseconds.
        Weight::from_parts(1_148_454_119, 317931)
            // Standard Error: 136_119
            .saturating_add(Weight::from_parts(39_683_520, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_541_000 picoseconds.
        Weight::from_parts(2_433_128, 0)
            // Standard Error: 15_522
            .saturating_add(Weight::from_parts(24_272_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_365_852_000 picoseconds.
        Weight::from_parts(4_313_449_806, 0)
            // Standard Error: 72_367
            .saturating_add(Weight::from_parts(4_181_774, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_368_921_000 picoseconds.
        Weight::from_parts(4_239_561_884, 0)
            // Standard Error: 57_396
            .saturating_add(Weight::from_parts(4_560_819, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_107_144_000 picoseconds.
        Weight::from_parts(10_561_289_462, 0)
            // Standard Error: 201_052
            .saturating_add(Weight::from_parts(10_379_219, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_413_613_000 picoseconds.
        Weight::from_parts(10_991_139_538, 0)
            // Standard Error: 142_302
            .saturating_add(Weight::from_parts(8_672_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_032_000 picoseconds.
        Weight::from_parts(2_104_000, 0)
            // Standard Error: 9_204
            .saturating_add(Weight::from_parts(3_804_527, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_038_000 picoseconds.
        Weight::from_parts(2_139_000, 0)
            // Standard Error: 5_115
            .saturating_add(Weight::from_parts(3_084_318, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_072_000 picoseconds.
        Weight::from_parts(3_445_902, 0)
            // Standard Error: 1_136
            .saturating_add(Weight::from_parts(1_565_873, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_078_000 picoseconds.
        Weight::from_parts(2_144_000, 0)
            // Standard Error: 8_221
            .saturating_add(Weight::from_parts(2_959_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_011_000 picoseconds.
        Weight::from_parts(3_774_803, 0)
            // Standard Error: 19_608
            .saturating_add(Weight::from_parts(5_093_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_806_000 picoseconds.
        Weight::from_parts(6_450_434, 0)
            // Standard Error: 2_416
            .saturating_add(Weight::from_parts(136_592, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_055_000 picoseconds.
        Weight::from_parts(5_063_775, 0)
            // Standard Error: 6_961
            .saturating_add(Weight::from_parts(2_556_973, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_556_973 -
            2_423_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_071_000 picoseconds.
        Weight::from_parts(3_972_796, 0)
            // Standard Error: 12_215
            .saturating_add(Weight::from_parts(2_423_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_480_000 picoseconds.
        Weight::from_parts(19_447_616, 0)
            // Standard Error: 30_790
            .saturating_add(Weight::from_parts(9_755_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_682_000 picoseconds.
        Weight::from_parts(5_221_026, 0)
            // Standard Error: 5_816
            .saturating_add(Weight::from_parts(1_216_997, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_229_000 picoseconds.
        Weight::from_parts(5_537_085, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(59, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(1_390_918, 0)
            // Standard Error: 3_273
            .saturating_add(Weight::from_parts(283_976, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_129_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 4_917
            .saturating_add(Weight::from_parts(743_551, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_097_000 picoseconds.
        Weight::from_parts(2_127_000, 0)
            // Standard Error: 4_721
            .saturating_add(Weight::from_parts(736_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_196_000 picoseconds.
        Weight::from_parts(1_484_688, 0)
            // Standard Error: 9_129
            .saturating_add(Weight::from_parts(828_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_225_000 picoseconds.
        Weight::from_parts(6_330_000, 0)
            // Standard Error: 8_047
            .saturating_add(Weight::from_parts(1_250_354, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_069_000 picoseconds.
        Weight::from_parts(2_412_991, 0)
            // Standard Error: 10_706
            .saturating_add(Weight::from_parts(7_194_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_059_000 picoseconds.
        Weight::from_parts(2_099_000, 0)
            // Standard Error: 8_378
            .saturating_add(Weight::from_parts(3_410_361, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_009_000 picoseconds.
        Weight::from_parts(2_086_000, 0)
            // Standard Error: 5_509
            .saturating_add(Weight::from_parts(3_080_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_021_000 picoseconds.
        Weight::from_parts(2_062_000, 0)
            // Standard Error: 6_757
            .saturating_add(Weight::from_parts(3_085_303, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_060_000 picoseconds.
        Weight::from_parts(2_129_000, 0)
            // Standard Error: 4_428
            .saturating_add(Weight::from_parts(2_603_052, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_055_000 picoseconds.
        Weight::from_parts(2_084_000, 0)
            // Standard Error: 3_866
            .saturating_add(Weight::from_parts(557_136, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_093_000 picoseconds.
        Weight::from_parts(1_321_370, 0)
            // Standard Error: 3_707
            .saturating_add(Weight::from_parts(379_975, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_092_000 picoseconds.
        Weight::from_parts(2_172_000, 0)
            // Standard Error: 13_154
            .saturating_add(Weight::from_parts(1_808_879, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_085_000 picoseconds.
        Weight::from_parts(2_171_000, 0)
            // Standard Error: 8_761
            .saturating_add(Weight::from_parts(1_110_957, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_020_000 picoseconds.
        Weight::from_parts(1_590_406, 0)
            // Standard Error: 3_849
            .saturating_add(Weight::from_parts(359_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_069_000 picoseconds.
        Weight::from_parts(1_573_433, 0)
            // Standard Error: 3_110
            .saturating_add(Weight::from_parts(362_005, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_080_000 picoseconds.
        Weight::from_parts(533_847, 0)
            // Standard Error: 4_680
            .saturating_add(Weight::from_parts(530_154, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_033_000 picoseconds.
        Weight::from_parts(562_738, 0)
            // Standard Error: 4_817
            .saturating_add(Weight::from_parts(528_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_046_000 picoseconds.
        Weight::from_parts(652_873, 0)
            // Standard Error: 4_464
            .saturating_add(Weight::from_parts(466_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_104_000 picoseconds.
        Weight::from_parts(1_378_724, 0)
            // Standard Error: 3_423
            .saturating_add(Weight::from_parts(327_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_093_000 picoseconds.
        Weight::from_parts(2_631_224, 0)
            // Standard Error: 1_813
            .saturating_add(Weight::from_parts(163_072, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_067_000 picoseconds.
        Weight::from_parts(2_638_944, 0)
            // Standard Error: 1_843
            .saturating_add(Weight::from_parts(164_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_092_000 picoseconds.
        Weight::from_parts(2_172_000, 0)
            // Standard Error: 12_427
            .saturating_add(Weight::from_parts(1_820_609, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 8_104
            .saturating_add(Weight::from_parts(1_112_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_110_000 picoseconds.
        Weight::from_parts(2_133_000, 0)
            // Standard Error: 12_340
            .saturating_add(Weight::from_parts(1_887_845, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_091_000 picoseconds.
        Weight::from_parts(2_157_000, 0)
            // Standard Error: 9_196
            .saturating_add(Weight::from_parts(1_188_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_031_000 picoseconds.
        Weight::from_parts(2_080_000, 0)
            // Standard Error: 9_692
            .saturating_add(Weight::from_parts(1_801_188, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_061_000 picoseconds.
        Weight::from_parts(2_117_000, 0)
            // Standard Error: 5_982
            .saturating_add(Weight::from_parts(1_064_425, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_114_000 picoseconds.
        Weight::from_parts(2_178_000, 0)
            // Standard Error: 11_452
            .saturating_add(Weight::from_parts(1_799_647, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_181_000 picoseconds.
        Weight::from_parts(2_235_000, 0)
            // Standard Error: 7_605
            .saturating_add(Weight::from_parts(1_079_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_120_000 picoseconds.
        Weight::from_parts(2_191_000, 0)
            // Standard Error: 13_393
            .saturating_add(Weight::from_parts(1_834_094, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_047_000 picoseconds.
        Weight::from_parts(2_112_000, 0)
            // Standard Error: 7_444
            .saturating_add(Weight::from_parts(1_095_375, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_161_000, 0)
            // Standard Error: 11_026
            .saturating_add(Weight::from_parts(1_817_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_049_000 picoseconds.
        Weight::from_parts(2_136_000, 0)
            // Standard Error: 8_027
            .saturating_add(Weight::from_parts(1_145_393, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_023_000 picoseconds.
        Weight::from_parts(2_096_000, 0)
            // Standard Error: 12_116
            .saturating_add(Weight::from_parts(1_869_431, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_127_000 picoseconds.
        Weight::from_parts(2_189_000, 0)
            // Standard Error: 7_609
            .saturating_add(Weight::from_parts(1_107_151, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_078_000 picoseconds.
        Weight::from_parts(2_120_000, 0)
            // Standard Error: 10_958
            .saturating_add(Weight::from_parts(1_796_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_570_000 picoseconds.
        Weight::from_parts(2_613_000, 0)
            // Standard Error: 9_115
            .saturating_add(Weight::from_parts(1_139_660, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(2_175_000, 0)
            // Standard Error: 11_525
            .saturating_add(Weight::from_parts(1_801_973, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_080_000 picoseconds.
        Weight::from_parts(2_123_000, 0)
            // Standard Error: 7_402
            .saturating_add(Weight::from_parts(1_138_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_075_000 picoseconds.
        Weight::from_parts(2_140_000, 0)
            // Standard Error: 12_720
            .saturating_add(Weight::from_parts(1_866_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_105_000 picoseconds.
        Weight::from_parts(2_163_000, 0)
            // Standard Error: 8_256
            .saturating_add(Weight::from_parts(1_146_184, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_153_000, 0)
            // Standard Error: 7_594
            .saturating_add(Weight::from_parts(1_224_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_070_000 picoseconds.
        Weight::from_parts(2_092_000, 0)
            // Standard Error: 3_724
            .saturating_add(Weight::from_parts(586_999, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_010_000 picoseconds.
        Weight::from_parts(2_135_000, 0)
            // Standard Error: 7_708
            .saturating_add(Weight::from_parts(1_243_638, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_056_000 picoseconds.
        Weight::from_parts(2_105_000, 0)
            // Standard Error: 4_206
            .saturating_add(Weight::from_parts(601_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_118_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 11_235
            .saturating_add(Weight::from_parts(1_737_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_065_000 picoseconds.
        Weight::from_parts(2_104_000, 0)
            // Standard Error: 8_328
            .saturating_add(Weight::from_parts(1_135_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_082_000 picoseconds.
        Weight::from_parts(2_121_000, 0)
            // Standard Error: 6_260
            .saturating_add(Weight::from_parts(2_672_645, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_142_000 picoseconds.
        Weight::from_parts(1_736_423, 0)
            // Standard Error: 8_982
            .saturating_add(Weight::from_parts(2_340_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_046_000 picoseconds.
        Weight::from_parts(847_961, 0)
            // Standard Error: 23_117
            .saturating_add(Weight::from_parts(2_750_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_068_000 picoseconds.
        Weight::from_parts(2_965_248, 0)
            // Standard Error: 15_953
            .saturating_add(Weight::from_parts(2_462_277, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_120_000 picoseconds.
        Weight::from_parts(2_154_000, 0)
            // Standard Error: 17_359
            .saturating_add(Weight::from_parts(9_473_018, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_972_000 picoseconds.
        Weight::from_parts(2_016_150, 0)
            // Standard Error: 48_065
            .saturating_add(Weight::from_parts(7_570_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_097_000 picoseconds.
        Weight::from_parts(3_908_056, 0)
            // Standard Error: 13_333
            .saturating_add(Weight::from_parts(2_974_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_076_000 picoseconds.
        Weight::from_parts(1_189_858, 0)
            // Standard Error: 9_960
            .saturating_add(Weight::from_parts(2_619_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_018_000 picoseconds.
        Weight::from_parts(2_134_000, 0)
            // Standard Error: 8_685
            .saturating_add(Weight::from_parts(1_379_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_097_000 picoseconds.
        Weight::from_parts(2_147_000, 0)
            // Standard Error: 4_774
            .saturating_add(Weight::from_parts(671_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_079_000 picoseconds.
        Weight::from_parts(2_127_000, 0)
            // Standard Error: 8_841
            .saturating_add(Weight::from_parts(1_426_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_105_000 picoseconds.
        Weight::from_parts(2_139_000, 0)
            // Standard Error: 4_969
            .saturating_add(Weight::from_parts(709_780, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_030_000 picoseconds.
        Weight::from_parts(2_135_000, 0)
            // Standard Error: 8_058
            .saturating_add(Weight::from_parts(1_387_147, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_081_000 picoseconds.
        Weight::from_parts(2_163_000, 0)
            // Standard Error: 5_243
            .saturating_add(Weight::from_parts(662_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_120_000 picoseconds.
        Weight::from_parts(2_144_000, 0)
            // Standard Error: 7_402
            .saturating_add(Weight::from_parts(1_064_024, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_165_000, 0)
            // Standard Error: 3_940
            .saturating_add(Weight::from_parts(576_398, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_137_000 picoseconds.
        Weight::from_parts(2_163_000, 0)
            // Standard Error: 8_352
            .saturating_add(Weight::from_parts(1_092_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_105_000 picoseconds.
        Weight::from_parts(2_134_000, 0)
            // Standard Error: 3_813
            .saturating_add(Weight::from_parts(608_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_000 picoseconds.
        Weight::from_parts(2_213_000, 0)
            // Standard Error: 6_484
            .saturating_add(Weight::from_parts(1_111_563, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_045_000 picoseconds.
        Weight::from_parts(2_098_000, 0)
            // Standard Error: 3_744
            .saturating_add(Weight::from_parts(570_991, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_025_000 picoseconds.
        Weight::from_parts(2_138_000, 0)
            // Standard Error: 6_400
            .saturating_add(Weight::from_parts(1_058_166, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_116_000 picoseconds.
        Weight::from_parts(2_176_000, 0)
            // Standard Error: 3_098
            .saturating_add(Weight::from_parts(564_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_041_000 picoseconds.
        Weight::from_parts(2_092_000, 0)
            // Standard Error: 8_605
            .saturating_add(Weight::from_parts(1_105_115, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_080_000 picoseconds.
        Weight::from_parts(2_152_000, 0)
            // Standard Error: 3_548
            .saturating_add(Weight::from_parts(571_856, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 957_000 picoseconds.
        Weight::from_parts(1_046_000, 0)
            // Standard Error: 871
            .saturating_add(Weight::from_parts(254_104, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_865_000 picoseconds.
        Weight::from_parts(2_920_000, 3506)
            // Standard Error: 1_198
            .saturating_add(Weight::from_parts(689_208, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_548_000 picoseconds.
        Weight::from_parts(72_876_300, 0)
            // Standard Error: 6_632
            .saturating_add(Weight::from_parts(2_568_078, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 83_376_000 picoseconds.
        Weight::from_parts(85_522_000, 42236)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 54_684_000 picoseconds.
        Weight::from_parts(55_796_000, 21261)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 29_465_000 picoseconds.
        Weight::from_parts(30_170_000, 17070)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_112_000 picoseconds.
        Weight::from_parts(9_163_606, 7640)
            // Standard Error: 44_872
            .saturating_add(Weight::from_parts(16_405_437, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1306 + c * (16389 ±0)`
        //  Estimated: `40970 + c * (131112 ±0)`
        // Minimum execution time: 69_069_000 picoseconds.
        Weight::from_parts(70_420_000, 40970)
            // Standard Error: 153_624
            .saturating_add(Weight::from_parts(54_843_600, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 61_541_000 picoseconds.
        Weight::from_parts(40_428_583, 4990)
            // Standard Error: 46_451
            .saturating_add(Weight::from_parts(52_902_652, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `680`
        //  Estimated: `38737`
        // Minimum execution time: 65_324_000 picoseconds.
        Weight::from_parts(93_910_906, 38737)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_578, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 10_907_804_000 picoseconds.
        Weight::from_parts(189_835_969, 34312)
            // Standard Error: 169_375
            .saturating_add(Weight::from_parts(53_417_811, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_534, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 56_668_000 picoseconds.
        Weight::from_parts(43_656_049, 23853)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_176, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 58_900_000 picoseconds.
        Weight::from_parts(35_766_861, 27177)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_170, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 84_263_000 picoseconds.
        Weight::from_parts(66_382_733, 42227)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_191, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 94_575_000 picoseconds.
        Weight::from_parts(69_466_104, 45757)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_200, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 300_061_000 picoseconds.
        Weight::from_parts(315_415_779, 74319)
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 312_340_000 picoseconds.
        Weight::from_parts(327_672_905, 74319)
            // Standard Error: 1_264
            .saturating_add(Weight::from_parts(1_644, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 44_783_000 picoseconds.
        Weight::from_parts(45_832_000, 3899)
            // Standard Error: 34_819
            .saturating_add(Weight::from_parts(52_513_759, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_222_000 picoseconds.
        Weight::from_parts(83_705_000, 0)
            // Standard Error: 3_878_365
            .saturating_add(Weight::from_parts(613_553_553, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 367_316_000 picoseconds.
        Weight::from_parts(314_232_247, 0)
            // Standard Error: 8_362
            .saturating_add(Weight::from_parts(30_560_173, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 204_250_000 picoseconds.
        Weight::from_parts(238_265_949, 0)
            // Standard Error: 444_593
            .saturating_add(Weight::from_parts(121_406_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_420_000 picoseconds.
        Weight::from_parts(89_622_505, 0)
            // Standard Error: 5_057
            .saturating_add(Weight::from_parts(3_691_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_920_000 picoseconds.
        Weight::from_parts(141_710_953, 0)
            // Standard Error: 27_372
            .saturating_add(Weight::from_parts(4_186_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_069_000 picoseconds.
        Weight::from_parts(121_425_023, 0)
            // Standard Error: 484_931
            .saturating_add(Weight::from_parts(187_901_550, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_658_000 picoseconds.
        Weight::from_parts(81_380_601, 0)
            // Standard Error: 300_290
            .saturating_add(Weight::from_parts(183_685_712, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_794_000 picoseconds.
        Weight::from_parts(74_786_748, 0)
            // Standard Error: 353_347
            .saturating_add(Weight::from_parts(184_391_351, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_129_000 picoseconds.
        Weight::from_parts(74_437_127, 0)
            // Standard Error: 359_813
            .saturating_add(Weight::from_parts(186_105_830, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_526_000 picoseconds.
        Weight::from_parts(75_041_524, 0)
            // Standard Error: 298_913
            .saturating_add(Weight::from_parts(183_808_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_437_000 picoseconds.
        Weight::from_parts(73_753_815, 0)
            // Standard Error: 360_183
            .saturating_add(Weight::from_parts(183_811_848, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_233_000 picoseconds.
        Weight::from_parts(76_162_241, 0)
            // Standard Error: 348_871
            .saturating_add(Weight::from_parts(184_095_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_700_000 picoseconds.
        Weight::from_parts(75_632_622, 0)
            // Standard Error: 318_966
            .saturating_add(Weight::from_parts(184_173_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_697_000 picoseconds.
        Weight::from_parts(765_298_829, 0)
            // Standard Error: 494_226
            .saturating_add(Weight::from_parts(264_655_642, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 927_039_000 picoseconds.
        Weight::from_parts(930_360_000, 0)
            // Standard Error: 52_991
            .saturating_add(Weight::from_parts(13_308_287, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_428_000 picoseconds.
        Weight::from_parts(73_766_091, 0)
            // Standard Error: 342_766
            .saturating_add(Weight::from_parts(183_958_834, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_488_000 picoseconds.
        Weight::from_parts(75_808_814, 0)
            // Standard Error: 326_950
            .saturating_add(Weight::from_parts(187_356_240, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_740_000 picoseconds.
        Weight::from_parts(93_129_839, 0)
            // Standard Error: 422_472
            .saturating_add(Weight::from_parts(251_911_109, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_784_000 picoseconds.
        Weight::from_parts(85_989_000, 0)
            // Standard Error: 3_619_556
            .saturating_add(Weight::from_parts(1_034_331_139, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_690_000 picoseconds.
        Weight::from_parts(141_428_129, 0)
            // Standard Error: 497_112
            .saturating_add(Weight::from_parts(394_061_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 474_294_000 picoseconds.
        Weight::from_parts(476_290_000, 0)
            // Standard Error: 70_833
            .saturating_add(Weight::from_parts(21_577_622, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_530_000 picoseconds.
        Weight::from_parts(163_823_708, 0)
            // Standard Error: 532_143
            .saturating_add(Weight::from_parts(393_980_153, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 471_446_000 picoseconds.
        Weight::from_parts(473_566_000, 0)
            // Standard Error: 63_916
            .saturating_add(Weight::from_parts(21_426_433, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 707_850_000 picoseconds.
        Weight::from_parts(781_439_535, 0)
            // Standard Error: 580_841
            .saturating_add(Weight::from_parts(408_849_070, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 714_749_000 picoseconds.
        Weight::from_parts(833_362_176, 0)
            // Standard Error: 727_192
            .saturating_add(Weight::from_parts(422_362_848, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_948_000 picoseconds.
        Weight::from_parts(72_481_247, 0)
            // Standard Error: 357_664
            .saturating_add(Weight::from_parts(194_133_679, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_776_895_000 picoseconds.
        Weight::from_parts(3_959_516_619, 0)
            // Standard Error: 403_838
            .saturating_add(Weight::from_parts(282_548_725, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 486_113_000 picoseconds.
        Weight::from_parts(494_453_000, 0)
            // Standard Error: 47_562
            .saturating_add(Weight::from_parts(31_232_976, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_813_583_000 picoseconds.
        Weight::from_parts(3_968_942_472, 0)
            // Standard Error: 395_905
            .saturating_add(Weight::from_parts(342_421_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_768_761_000 picoseconds.
        Weight::from_parts(3_941_302_857, 0)
            // Standard Error: 451_554
            .saturating_add(Weight::from_parts(359_219_450, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 251_617_000 picoseconds.
        Weight::from_parts(297_322_594, 0)
            // Standard Error: 534_487
            .saturating_add(Weight::from_parts(411_509_170, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 642_741_000 picoseconds.
        Weight::from_parts(650_606_000, 0)
            // Standard Error: 55_190
            .saturating_add(Weight::from_parts(21_081_547, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_958_067_000 picoseconds.
        Weight::from_parts(4_093_086_625, 0)
            // Standard Error: 457_773
            .saturating_add(Weight::from_parts(362_786_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_510_000 picoseconds.
        Weight::from_parts(89_135_500, 0)
            // Standard Error: 242_199
            .saturating_add(Weight::from_parts(20_780_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_970_000 picoseconds.
        Weight::from_parts(89_679_568, 0)
            // Standard Error: 1_102
            .saturating_add(Weight::from_parts(429_566, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_823_000 picoseconds.
        Weight::from_parts(87_589_871, 0)
            // Standard Error: 270_505
            .saturating_add(Weight::from_parts(21_353_128, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_441_000 picoseconds.
        Weight::from_parts(93_897_949, 0)
            // Standard Error: 990
            .saturating_add(Weight::from_parts(424_915, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_977_000 picoseconds.
        Weight::from_parts(86_834_483, 0)
            // Standard Error: 275_061
            .saturating_add(Weight::from_parts(20_736_916, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_549_000 picoseconds.
        Weight::from_parts(87_749_228, 0)
            // Standard Error: 246_428
            .saturating_add(Weight::from_parts(17_695_571, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_574_000 picoseconds.
        Weight::from_parts(120_867_459, 0)
            // Standard Error: 436_075
            .saturating_add(Weight::from_parts(273_713_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_790_000 picoseconds.
        Weight::from_parts(101_156_000, 0)
            // Standard Error: 2_484
            .saturating_add(Weight::from_parts(651_035, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 703_527_000 picoseconds.
        Weight::from_parts(724_118_824, 0)
            // Standard Error: 2_090_589
            .saturating_add(Weight::from_parts(27_198_675, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 704_795_000 picoseconds.
        Weight::from_parts(732_991_420, 0)
            // Standard Error: 3_283_941
            .saturating_add(Weight::from_parts(108_796_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_234_000 picoseconds.
        Weight::from_parts(95_973_540, 0)
            // Standard Error: 352_529
            .saturating_add(Weight::from_parts(10_936_659, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_068_000 picoseconds.
        Weight::from_parts(94_055_117, 0)
            // Standard Error: 999
            .saturating_add(Weight::from_parts(427_403, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_604_000 picoseconds.
        Weight::from_parts(99_289_573, 0)
            // Standard Error: 294_194
            .saturating_add(Weight::from_parts(5_954_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_908_000 picoseconds.
        Weight::from_parts(85_902_344, 0)
            // Standard Error: 1_167
            .saturating_add(Weight::from_parts(432_350, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_410_000 picoseconds.
        Weight::from_parts(82_274_343, 0)
            // Standard Error: 320_670
            .saturating_add(Weight::from_parts(185_629_984, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_665_000 picoseconds.
        Weight::from_parts(78_994_781, 0)
            // Standard Error: 304_403
            .saturating_add(Weight::from_parts(185_751_973, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 707_679_000 picoseconds.
        Weight::from_parts(755_415_979, 0)
            // Standard Error: 507_246
            .saturating_add(Weight::from_parts(198_320_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 728_156_000 picoseconds.
        Weight::from_parts(747_790_615, 0)
            // Standard Error: 997
            .saturating_add(Weight::from_parts(151_362, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_465_124_000 picoseconds.
        Weight::from_parts(4_637_938_228, 0)
            // Standard Error: 511_174
            .saturating_add(Weight::from_parts(214_412_236, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_675_387_000 picoseconds.
        Weight::from_parts(4_783_450_358, 0)
            // Standard Error: 10_864
            .saturating_add(Weight::from_parts(13_653_066, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_954_000 picoseconds.
        Weight::from_parts(105_635_743, 0)
            // Standard Error: 434_137
            .saturating_add(Weight::from_parts(202_396_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 190_090_000 picoseconds.
        Weight::from_parts(191_881_000, 0)
            // Standard Error: 58_941
            .saturating_add(Weight::from_parts(26_076_036, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_927_000 picoseconds.
        Weight::from_parts(76_748_301, 0)
            // Standard Error: 333_497
            .saturating_add(Weight::from_parts(186_061_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_806_000 picoseconds.
        Weight::from_parts(88_897_602, 0)
            // Standard Error: 264_801
            .saturating_add(Weight::from_parts(24_184_297, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_799_000 picoseconds.
        Weight::from_parts(88_124_979, 0)
            // Standard Error: 281_493
            .saturating_add(Weight::from_parts(14_965_820, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_209_000 picoseconds.
        Weight::from_parts(85_595_138, 0)
            // Standard Error: 282_650
            .saturating_add(Weight::from_parts(16_828_061, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_703_000 picoseconds.
        Weight::from_parts(86_177_753, 0)
            // Standard Error: 294_582
            .saturating_add(Weight::from_parts(14_020_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_884_000 picoseconds.
        Weight::from_parts(85_472_404, 0)
            // Standard Error: 251_651
            .saturating_add(Weight::from_parts(13_299_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_237_000 picoseconds.
        Weight::from_parts(195_816_221, 0)
            // Standard Error: 401_265
            .saturating_add(Weight::from_parts(291_418_256, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_462_000 picoseconds.
        Weight::from_parts(150_822_344, 0)
            // Standard Error: 477_564
            .saturating_add(Weight::from_parts(479_519_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_173_703_000 picoseconds.
        Weight::from_parts(44_786_680_000, 0)
            // Standard Error: 262_762
            .saturating_add(Weight::from_parts(7_756_692, 0).saturating_mul(p.into()))
            // Standard Error: 262_749
            .saturating_add(Weight::from_parts(175_999_814, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_327_000 picoseconds.
        Weight::from_parts(155_021_732, 0)
            // Standard Error: 465_230
            .saturating_add(Weight::from_parts(481_044_822, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_301_306_000 picoseconds.
        Weight::from_parts(45_427_868_000, 0)
            // Standard Error: 275_806
            .saturating_add(Weight::from_parts(7_224_081, 0).saturating_mul(p.into()))
            // Standard Error: 275_792
            .saturating_add(Weight::from_parts(175_953_245, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_025_000 picoseconds.
        Weight::from_parts(99_446_773, 0)
            // Standard Error: 27_427
            .saturating_add(Weight::from_parts(3_526_941, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 81_787_000 picoseconds.
        Weight::from_parts(107_162_103, 1131)
            // Standard Error: 5_354
            .saturating_add(Weight::from_parts(11_793_974, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 82_988_000 picoseconds.
        Weight::from_parts(83_914_000, 1131)
            // Standard Error: 39_652
            .saturating_add(Weight::from_parts(35_409_412, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_092_465_000 picoseconds.
        Weight::from_parts(5_880_105_740, 5069931)
            // Standard Error: 68_365
            .saturating_add(Weight::from_parts(35_422_702, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 85_136_000 picoseconds.
        Weight::from_parts(87_447_000, 1939)
            // Standard Error: 51_719
            .saturating_add(Weight::from_parts(47_282_286, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 93_328_000 picoseconds.
        Weight::from_parts(88_394_648, 1131)
            // Standard Error: 68_535
            .saturating_add(Weight::from_parts(36_790_446, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 775_981_000 picoseconds.
        Weight::from_parts(818_435_618, 1496)
            // Standard Error: 224_188
            .saturating_add(Weight::from_parts(41_275_447, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_124_726_000 picoseconds.
        Weight::from_parts(1_148_454_119, 317931)
            // Standard Error: 136_119
            .saturating_add(Weight::from_parts(39_683_520, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_541_000 picoseconds.
        Weight::from_parts(2_433_128, 0)
            // Standard Error: 15_522
            .saturating_add(Weight::from_parts(24_272_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_365_852_000 picoseconds.
        Weight::from_parts(4_313_449_806, 0)
            // Standard Error: 72_367
            .saturating_add(Weight::from_parts(4_181_774, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_368_921_000 picoseconds.
        Weight::from_parts(4_239_561_884, 0)
            // Standard Error: 57_396
            .saturating_add(Weight::from_parts(4_560_819, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_107_144_000 picoseconds.
        Weight::from_parts(10_561_289_462, 0)
            // Standard Error: 201_052
            .saturating_add(Weight::from_parts(10_379_219, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_413_613_000 picoseconds.
        Weight::from_parts(10_991_139_538, 0)
            // Standard Error: 142_302
            .saturating_add(Weight::from_parts(8_672_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_032_000 picoseconds.
        Weight::from_parts(2_104_000, 0)
            // Standard Error: 9_204
            .saturating_add(Weight::from_parts(3_804_527, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_038_000 picoseconds.
        Weight::from_parts(2_139_000, 0)
            // Standard Error: 5_115
            .saturating_add(Weight::from_parts(3_084_318, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_072_000 picoseconds.
        Weight::from_parts(3_445_902, 0)
            // Standard Error: 1_136
            .saturating_add(Weight::from_parts(1_565_873, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_078_000 picoseconds.
        Weight::from_parts(2_144_000, 0)
            // Standard Error: 8_221
            .saturating_add(Weight::from_parts(2_959_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_011_000 picoseconds.
        Weight::from_parts(3_774_803, 0)
            // Standard Error: 19_608
            .saturating_add(Weight::from_parts(5_093_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_806_000 picoseconds.
        Weight::from_parts(6_450_434, 0)
            // Standard Error: 2_416
            .saturating_add(Weight::from_parts(136_592, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_055_000 picoseconds.
        Weight::from_parts(5_063_775, 0)
            // Standard Error: 6_961
            .saturating_add(Weight::from_parts(2_556_973, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_556_973 -
            2_423_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_071_000 picoseconds.
        Weight::from_parts(3_972_796, 0)
            // Standard Error: 12_215
            .saturating_add(Weight::from_parts(2_423_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_480_000 picoseconds.
        Weight::from_parts(19_447_616, 0)
            // Standard Error: 30_790
            .saturating_add(Weight::from_parts(9_755_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_682_000 picoseconds.
        Weight::from_parts(5_221_026, 0)
            // Standard Error: 5_816
            .saturating_add(Weight::from_parts(1_216_997, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_229_000 picoseconds.
        Weight::from_parts(5_537_085, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(59, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(1_390_918, 0)
            // Standard Error: 3_273
            .saturating_add(Weight::from_parts(283_976, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_129_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 4_917
            .saturating_add(Weight::from_parts(743_551, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_097_000 picoseconds.
        Weight::from_parts(2_127_000, 0)
            // Standard Error: 4_721
            .saturating_add(Weight::from_parts(736_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_196_000 picoseconds.
        Weight::from_parts(1_484_688, 0)
            // Standard Error: 9_129
            .saturating_add(Weight::from_parts(828_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_225_000 picoseconds.
        Weight::from_parts(6_330_000, 0)
            // Standard Error: 8_047
            .saturating_add(Weight::from_parts(1_250_354, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_069_000 picoseconds.
        Weight::from_parts(2_412_991, 0)
            // Standard Error: 10_706
            .saturating_add(Weight::from_parts(7_194_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_059_000 picoseconds.
        Weight::from_parts(2_099_000, 0)
            // Standard Error: 8_378
            .saturating_add(Weight::from_parts(3_410_361, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_009_000 picoseconds.
        Weight::from_parts(2_086_000, 0)
            // Standard Error: 5_509
            .saturating_add(Weight::from_parts(3_080_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_021_000 picoseconds.
        Weight::from_parts(2_062_000, 0)
            // Standard Error: 6_757
            .saturating_add(Weight::from_parts(3_085_303, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_060_000 picoseconds.
        Weight::from_parts(2_129_000, 0)
            // Standard Error: 4_428
            .saturating_add(Weight::from_parts(2_603_052, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_055_000 picoseconds.
        Weight::from_parts(2_084_000, 0)
            // Standard Error: 3_866
            .saturating_add(Weight::from_parts(557_136, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_093_000 picoseconds.
        Weight::from_parts(1_321_370, 0)
            // Standard Error: 3_707
            .saturating_add(Weight::from_parts(379_975, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_092_000 picoseconds.
        Weight::from_parts(2_172_000, 0)
            // Standard Error: 13_154
            .saturating_add(Weight::from_parts(1_808_879, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_085_000 picoseconds.
        Weight::from_parts(2_171_000, 0)
            // Standard Error: 8_761
            .saturating_add(Weight::from_parts(1_110_957, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_020_000 picoseconds.
        Weight::from_parts(1_590_406, 0)
            // Standard Error: 3_849
            .saturating_add(Weight::from_parts(359_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_069_000 picoseconds.
        Weight::from_parts(1_573_433, 0)
            // Standard Error: 3_110
            .saturating_add(Weight::from_parts(362_005, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_080_000 picoseconds.
        Weight::from_parts(533_847, 0)
            // Standard Error: 4_680
            .saturating_add(Weight::from_parts(530_154, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_033_000 picoseconds.
        Weight::from_parts(562_738, 0)
            // Standard Error: 4_817
            .saturating_add(Weight::from_parts(528_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_046_000 picoseconds.
        Weight::from_parts(652_873, 0)
            // Standard Error: 4_464
            .saturating_add(Weight::from_parts(466_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_104_000 picoseconds.
        Weight::from_parts(1_378_724, 0)
            // Standard Error: 3_423
            .saturating_add(Weight::from_parts(327_497, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_093_000 picoseconds.
        Weight::from_parts(2_631_224, 0)
            // Standard Error: 1_813
            .saturating_add(Weight::from_parts(163_072, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_067_000 picoseconds.
        Weight::from_parts(2_638_944, 0)
            // Standard Error: 1_843
            .saturating_add(Weight::from_parts(164_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_092_000 picoseconds.
        Weight::from_parts(2_172_000, 0)
            // Standard Error: 12_427
            .saturating_add(Weight::from_parts(1_820_609, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 8_104
            .saturating_add(Weight::from_parts(1_112_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_110_000 picoseconds.
        Weight::from_parts(2_133_000, 0)
            // Standard Error: 12_340
            .saturating_add(Weight::from_parts(1_887_845, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_091_000 picoseconds.
        Weight::from_parts(2_157_000, 0)
            // Standard Error: 9_196
            .saturating_add(Weight::from_parts(1_188_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_031_000 picoseconds.
        Weight::from_parts(2_080_000, 0)
            // Standard Error: 9_692
            .saturating_add(Weight::from_parts(1_801_188, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_061_000 picoseconds.
        Weight::from_parts(2_117_000, 0)
            // Standard Error: 5_982
            .saturating_add(Weight::from_parts(1_064_425, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_114_000 picoseconds.
        Weight::from_parts(2_178_000, 0)
            // Standard Error: 11_452
            .saturating_add(Weight::from_parts(1_799_647, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_181_000 picoseconds.
        Weight::from_parts(2_235_000, 0)
            // Standard Error: 7_605
            .saturating_add(Weight::from_parts(1_079_757, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_120_000 picoseconds.
        Weight::from_parts(2_191_000, 0)
            // Standard Error: 13_393
            .saturating_add(Weight::from_parts(1_834_094, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_047_000 picoseconds.
        Weight::from_parts(2_112_000, 0)
            // Standard Error: 7_444
            .saturating_add(Weight::from_parts(1_095_375, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_161_000, 0)
            // Standard Error: 11_026
            .saturating_add(Weight::from_parts(1_817_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_049_000 picoseconds.
        Weight::from_parts(2_136_000, 0)
            // Standard Error: 8_027
            .saturating_add(Weight::from_parts(1_145_393, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_023_000 picoseconds.
        Weight::from_parts(2_096_000, 0)
            // Standard Error: 12_116
            .saturating_add(Weight::from_parts(1_869_431, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_127_000 picoseconds.
        Weight::from_parts(2_189_000, 0)
            // Standard Error: 7_609
            .saturating_add(Weight::from_parts(1_107_151, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_078_000 picoseconds.
        Weight::from_parts(2_120_000, 0)
            // Standard Error: 10_958
            .saturating_add(Weight::from_parts(1_796_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_570_000 picoseconds.
        Weight::from_parts(2_613_000, 0)
            // Standard Error: 9_115
            .saturating_add(Weight::from_parts(1_139_660, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(2_175_000, 0)
            // Standard Error: 11_525
            .saturating_add(Weight::from_parts(1_801_973, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_080_000 picoseconds.
        Weight::from_parts(2_123_000, 0)
            // Standard Error: 7_402
            .saturating_add(Weight::from_parts(1_138_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_075_000 picoseconds.
        Weight::from_parts(2_140_000, 0)
            // Standard Error: 12_720
            .saturating_add(Weight::from_parts(1_866_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_105_000 picoseconds.
        Weight::from_parts(2_163_000, 0)
            // Standard Error: 8_256
            .saturating_add(Weight::from_parts(1_146_184, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_153_000, 0)
            // Standard Error: 7_594
            .saturating_add(Weight::from_parts(1_224_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_070_000 picoseconds.
        Weight::from_parts(2_092_000, 0)
            // Standard Error: 3_724
            .saturating_add(Weight::from_parts(586_999, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_010_000 picoseconds.
        Weight::from_parts(2_135_000, 0)
            // Standard Error: 7_708
            .saturating_add(Weight::from_parts(1_243_638, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_056_000 picoseconds.
        Weight::from_parts(2_105_000, 0)
            // Standard Error: 4_206
            .saturating_add(Weight::from_parts(601_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_118_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 11_235
            .saturating_add(Weight::from_parts(1_737_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_065_000 picoseconds.
        Weight::from_parts(2_104_000, 0)
            // Standard Error: 8_328
            .saturating_add(Weight::from_parts(1_135_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_082_000 picoseconds.
        Weight::from_parts(2_121_000, 0)
            // Standard Error: 6_260
            .saturating_add(Weight::from_parts(2_672_645, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_142_000 picoseconds.
        Weight::from_parts(1_736_423, 0)
            // Standard Error: 8_982
            .saturating_add(Weight::from_parts(2_340_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_046_000 picoseconds.
        Weight::from_parts(847_961, 0)
            // Standard Error: 23_117
            .saturating_add(Weight::from_parts(2_750_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_068_000 picoseconds.
        Weight::from_parts(2_965_248, 0)
            // Standard Error: 15_953
            .saturating_add(Weight::from_parts(2_462_277, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_120_000 picoseconds.
        Weight::from_parts(2_154_000, 0)
            // Standard Error: 17_359
            .saturating_add(Weight::from_parts(9_473_018, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_972_000 picoseconds.
        Weight::from_parts(2_016_150, 0)
            // Standard Error: 48_065
            .saturating_add(Weight::from_parts(7_570_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_097_000 picoseconds.
        Weight::from_parts(3_908_056, 0)
            // Standard Error: 13_333
            .saturating_add(Weight::from_parts(2_974_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_076_000 picoseconds.
        Weight::from_parts(1_189_858, 0)
            // Standard Error: 9_960
            .saturating_add(Weight::from_parts(2_619_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_018_000 picoseconds.
        Weight::from_parts(2_134_000, 0)
            // Standard Error: 8_685
            .saturating_add(Weight::from_parts(1_379_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_097_000 picoseconds.
        Weight::from_parts(2_147_000, 0)
            // Standard Error: 4_774
            .saturating_add(Weight::from_parts(671_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_079_000 picoseconds.
        Weight::from_parts(2_127_000, 0)
            // Standard Error: 8_841
            .saturating_add(Weight::from_parts(1_426_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_105_000 picoseconds.
        Weight::from_parts(2_139_000, 0)
            // Standard Error: 4_969
            .saturating_add(Weight::from_parts(709_780, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_030_000 picoseconds.
        Weight::from_parts(2_135_000, 0)
            // Standard Error: 8_058
            .saturating_add(Weight::from_parts(1_387_147, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_081_000 picoseconds.
        Weight::from_parts(2_163_000, 0)
            // Standard Error: 5_243
            .saturating_add(Weight::from_parts(662_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_120_000 picoseconds.
        Weight::from_parts(2_144_000, 0)
            // Standard Error: 7_402
            .saturating_add(Weight::from_parts(1_064_024, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_095_000 picoseconds.
        Weight::from_parts(2_165_000, 0)
            // Standard Error: 3_940
            .saturating_add(Weight::from_parts(576_398, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_137_000 picoseconds.
        Weight::from_parts(2_163_000, 0)
            // Standard Error: 8_352
            .saturating_add(Weight::from_parts(1_092_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_105_000 picoseconds.
        Weight::from_parts(2_134_000, 0)
            // Standard Error: 3_813
            .saturating_add(Weight::from_parts(608_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_000 picoseconds.
        Weight::from_parts(2_213_000, 0)
            // Standard Error: 6_484
            .saturating_add(Weight::from_parts(1_111_563, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_045_000 picoseconds.
        Weight::from_parts(2_098_000, 0)
            // Standard Error: 3_744
            .saturating_add(Weight::from_parts(570_991, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_025_000 picoseconds.
        Weight::from_parts(2_138_000, 0)
            // Standard Error: 6_400
            .saturating_add(Weight::from_parts(1_058_166, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_116_000 picoseconds.
        Weight::from_parts(2_176_000, 0)
            // Standard Error: 3_098
            .saturating_add(Weight::from_parts(564_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_041_000 picoseconds.
        Weight::from_parts(2_092_000, 0)
            // Standard Error: 8_605
            .saturating_add(Weight::from_parts(1_105_115, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_080_000 picoseconds.
        Weight::from_parts(2_152_000, 0)
            // Standard Error: 3_548
            .saturating_add(Weight::from_parts(571_856, 0).saturating_mul(r.into()))
    }
}
